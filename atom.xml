<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2014-11-03T00:02:25+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[更好的git log]]></title>
    <link href="http://strivingboy.github.io/blog/2014/09/29/better-git-log/"/>
    <updated>2014-09-29T11:05:41+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/09/29/better-git-log</id>
    <content type="html"><![CDATA[<p><code>git log</code>对于使用git的&#8221;码农们&#8221;一定非常熟悉，如：</p>

<p> git log  命令是查看全部提交日志</p>

<p> git log -2  查看最近2次的提交日志</p>

<p> git log -p  查看历史纪录以来哪几行被修改</p>

<p> git log &ndash;oneline 查看历史提交日志，单行显示</p>

<!--more-->


<p>以上是我们经常使用过的命令，接下来将谈谈如何更好的使用git log来解决使用过程中遇到的需求：（大家有木有遇到呢&hellip;）</p>

<p><strong>提交历史搜索</strong></p>

<p><code>git log --author="&lt;pattern&gt;"</code></p>

<p>根据提交作者，搜索提交历史 pattern 可以是字符串或这则表达式</p>

<p><code>git log --grep="&lt;pattern&gt;"</code></p>

<p>搜索提交历史 同上pattern 可以是字符串或这则表达式</p>

<p><strong>更清楚的显示单行提交历史</strong></p>

<p><code>git log --pretty=online</code> 显示如下：</p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-oneline.png" alt="git log --pretty=online" /></p>

<p>如何图形化显示更清晰的提交历史呢？</p>

<p><code>git log --graph --decorate --pretty=oneline --abbrev-commit --all</code></p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-lola.png" alt="git log lola" /></p>

<p>能不能再清楚点呢？比如：显示提交时间、作者&hellip;..当然可以啦</p>

<p><code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</code></p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-lg.png" alt="git log lola" /></p>

<p>是不是漂亮了很多，每次打完包我们都回写下change log, 之前每次都是根据git log 复制后编辑，汗&hellip;这体力活，有了上面的命令轻松修改下：</p>

<p><code>git log --pretty=format:'%s  %C(bold blue)(%an)%Creset' --abbrev-commit</code></p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-changelog.png" alt="git log lola" /></p>

<p>上面的命令这么长，每次敲岂不累死（前提是要记得住，哈哈）我们可以使用linux 下的 alias,详见：<u><a href="http://en.wikipedia.org/wiki/Alias_">http://en.wikipedia.org/wiki/Alias_</a>(command) </u></p>

<p><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</code></p>

<p>现在你每次在终端输入git lg 就可以啦. 关于git 别名，可以参见：</p>

<p><strong><a href="http://strivingboy.github.com/blog/2014/09/03/git-aliase/">让Git命令更简单（Git alias)</a></strong></p>

<p><strong> 参考链接 </strong></p>

<ul>
<li><p><u><a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">https://www.kernel.org/pub/software/scm/git/docs/git-log.html</a> </u></p></li>
<li><p><u><a href="https://coderwall.com/p/euwpig">https://coderwall.com/p/euwpig</a> </u></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios 8 Touch ID 使用]]></title>
    <link href="http://strivingboy.github.io/blog/2014/09/23/touchid-use/"/>
    <updated>2014-09-23T13:14:06+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/09/23/touchid-use</id>
    <content type="html"><![CDATA[<h2>Touch ID 介绍</h2>

<p>参考：<u><a href="http://www.imore.com/touch-id-ios-8-explained">http://www.imore.com/touch-id-ios-8-explained</a> </u></p>

<h2>Touch ID API</h2>

<p>前提：只有在装有iOS8的真机设备才能编译通过。</p>

<p><strong>Step1).</strong> 使用Touch ID API,首先需要导入:<code>LocalAuthentication.framework</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;LocalAuthentication/LAContext.h&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p><strong>Step2).</strong> 使用API，我们需要创建一个Authentication Context</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">LAContext</span> <span class="o">*</span><span class="n">myContext</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LAContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Step3).</strong> 检查当前Touch ID 是否可用,设备没有TouchID或者TouchID未开启返回false，有TouchID并开启返回true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">canEvaluatePolicy</span><span class="p">:(</span><span class="n">LAPolicy</span><span class="p">)</span><span class="n">policy</span> <span class="nl">error</span><span class="p">:(</span><span class="bp">NSError</span> <span class="o">*</span> <span class="k">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Step4).</strong> 调用显示验证界面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">evaluatePolicy</span><span class="p">:(</span><span class="n">LAPolicy</span><span class="p">)</span><span class="n">policy</span>
</span><span class='line'>         <span class="nl">localizedReason</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">localizedReason</span>
</span><span class='line'>                     <span class="nl">reply</span><span class="p">:(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">))</span><span class="n">reply</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>localizedReason：根据官方文档必须提供.</p>

<p>reply:验证成功 success == YES, 否则返回error,根据<strong>error.code</strong>可以得到具体的原因.</p>

<p>在<code>&lt;LocalAuthentication/LAError.h&gt;</code>头文件中可以看到如下定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>  <span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">,</span> <span class="n">LAError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">/// Authentication was not successful, because user failed to provide valid credentials.</span>
</span><span class='line'>      <span class="n">LAErrorAuthenticationFailed</span> <span class="o">=</span> <span class="n">kLAErrorAuthenticationFailed</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">/// Authentication was canceled by user (e.g. tapped Cancel button).</span>
</span><span class='line'>      <span class="n">LAErrorUserCancel</span>           <span class="o">=</span> <span class="n">kLAErrorUserCancel</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">/// Authentication was canceled, because the user tapped the fallback button (Enter Password).</span>
</span><span class='line'>      <span class="n">LAErrorUserFallback</span>         <span class="o">=</span> <span class="n">kLAErrorUserFallback</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">/// Authentication was canceled by system (e.g. another application went to foreground).</span>
</span><span class='line'>      <span class="n">LAErrorSystemCancel</span>         <span class="o">=</span> <span class="n">kLAErrorSystemCancel</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">/// Authentication could not start, because passcode is not set on the device.</span>
</span><span class='line'>      <span class="n">LAErrorPasscodeNotSet</span>       <span class="o">=</span> <span class="n">kLAErrorPasscodeNotSet</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">/// Authentication could not start, because Touch ID is not available on the device.</span>
</span><span class='line'>      <span class="n">LAErrorTouchIDNotAvailable</span>  <span class="o">=</span> <span class="n">kLAErrorTouchIDNotAvailable</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">/// Authentication could not start, because Touch ID has no enrolled fingers.</span>
</span><span class='line'>      <span class="n">LAErrorTouchIDNotEnrolled</span>   <span class="o">=</span> <span class="n">kLAErrorTouchIDNotEnrolled</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">NS_ENUM_AVAILABLE</span><span class="p">(</span><span class="mi">10</span><span class="n">_10</span><span class="p">,</span> <span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Touch ID API 简单封装Demo</h2>

<p><strong>TouchIdUtil.h</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>    <span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">,</span> <span class="n">TouchIdEvaluateResult</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">kTouchIdEvaluateResultSuccess</span><span class="p">,</span>   <span class="c1">// 验证成功</span>
</span><span class='line'>        <span class="n">kTouchIdEvaluateResultFailed</span><span class="p">,</span>    <span class="c1">// 验证失败</span>
</span><span class='line'>        <span class="n">kTouchIdEvaluateResultCancel</span><span class="p">,</span>    <span class="c1">// 点击取消按钮</span>
</span><span class='line'>        <span class="n">kTouchIdEvaluateResultFallback</span><span class="p">,</span>  <span class="c1">// 点击回退按钮</span>
</span><span class='line'>        <span class="n">kTouchIdEvaluateResultOther</span>      <span class="c1">// 未知结果</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">TouchIdEvaluateCallback</span><span class="p">)(</span><span class="n">TouchIdEvaluateResult</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@interface</span> <span class="nc">TouchIdUtil</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Touch Id 是否开启或设置</span>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">canEvaluatePolicy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Touch Id 验证 callback回调已经抛到了主线程</span>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">evaluatePolicy</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">localizedReasion</span>
</span><span class='line'>             <span class="nl">fallbackTitle</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">title</span>
</span><span class='line'>                  <span class="nl">callback</span><span class="p">:(</span><span class="n">TouchIdEvaluateCallback</span><span class="p">)</span><span class="n">cb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>TouchIdUtil.m</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;TouchIdUtil.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;LocalAuthentication/LocalAuthentication.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TouchIdUtil</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">TouchIdUtil</span><span class="o">*</span> <span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TouchIdUtil</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canEvaluatePolicy</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">LAContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LAContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">context</span> <span class="nl">canEvaluatePolicy</span><span class="p">:</span> <span class="n">LAPolicyDeviceOwnerAuthenticationWithBiometrics</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">evaluatePolicy:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">localizedReasion</span>
</span><span class='line'>         <span class="nf">fallbackTitle:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span>
</span><span class='line'>              <span class="nf">callback:</span><span class="p">(</span><span class="n">TouchIdEvaluateCallback</span><span class="p">)</span><span class="nv">cb</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">LAContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LAContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">context</span><span class="p">.</span><span class="n">localizedFallbackTitle</span> <span class="o">=</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">myLocalizedReasonString</span> <span class="o">=</span> <span class="n">localizedReasion</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__weak</span> <span class="k">typeof</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">context</span> <span class="nl">evaluatePolicy</span><span class="p">:</span><span class="n">LAPolicyDeviceOwnerAuthenticationWithBiometrics</span>
</span><span class='line'>             <span class="nl">localizedReason</span><span class="p">:</span><span class="n">myLocalizedReasonString</span>
</span><span class='line'>                       <span class="nl">reply</span><span class="p">:</span>
</span><span class='line'>     <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">succes</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="n">succes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>             <span class="p">[[</span><span class="n">weakSelf</span> <span class="k">class</span><span class="p">]</span> <span class="nl">reportResultOnUI</span><span class="p">:</span><span class="n">kTouchIdEvaluateResultSuccess</span> <span class="nl">callback</span><span class="p">:</span><span class="n">cb</span><span class="p">];</span>
</span><span class='line'>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">switch</span> <span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="k">case</span> <span class="nl">LAErrorAuthenticationFailed</span><span class="p">:</span>
</span><span class='line'>                     <span class="p">[[</span><span class="n">weakSelf</span> <span class="k">class</span><span class="p">]</span> <span class="nl">reportResultOnUI</span><span class="p">:</span><span class="n">kTouchIdEvaluateResultFailed</span> <span class="nl">callback</span><span class="p">:</span><span class="n">cb</span><span class="p">];</span>
</span><span class='line'>                     <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                 <span class="k">case</span> <span class="nl">LAErrorUserCancel</span><span class="p">:</span>
</span><span class='line'>                     <span class="p">[[</span><span class="n">weakSelf</span> <span class="k">class</span><span class="p">]</span> <span class="nl">reportResultOnUI</span><span class="p">:</span><span class="n">kTouchIdEvaluateResultCancel</span> <span class="nl">callback</span><span class="p">:</span><span class="n">cb</span><span class="p">];</span>
</span><span class='line'>                     <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                 <span class="k">case</span> <span class="nl">LAErrorUserFallback</span><span class="p">:</span>
</span><span class='line'>                     <span class="p">[[</span><span class="n">weakSelf</span> <span class="k">class</span><span class="p">]</span> <span class="nl">reportResultOnUI</span><span class="p">:</span><span class="n">kTouchIdEvaluateResultFallback</span> <span class="nl">callback</span><span class="p">:</span><span class="n">cb</span><span class="p">];</span>
</span><span class='line'>                     <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                 <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                     <span class="p">[[</span><span class="n">weakSelf</span> <span class="k">class</span><span class="p">]</span> <span class="nl">reportResultOnUI</span><span class="p">:</span><span class="n">kTouchIdEvaluateResultOther</span> <span class="nl">callback</span><span class="p">:</span><span class="n">cb</span><span class="p">];</span>
</span><span class='line'>                     <span class="k">break</span><span class="p">;</span>
</span><span class='line'>             <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>     <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reportResultOnUI:</span><span class="p">(</span><span class="n">TouchIdEvaluateResult</span><span class="p">)</span><span class="nv">result</span> <span class="nf">callback:</span><span class="p">(</span><span class="n">TouchIdEvaluateCallback</span><span class="p">)</span><span class="nv">cb</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">cb</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<strong> 问题总结 </strong></p>

<p>1.指纹识别3次错误会弹出系统“输入密码”数字键盘，而且这3次错误机会是系统所有应用共享</p>

<p>2.不要在 <code>evaluatePolicy:</code>方法中调用 <code>canEvaluatePolicy</code> <code>&lt;LocalAuthentication/LAContext.h&gt;</code>中有说明</p>

<p><strong> 参考链接 </strong></p>

<ul>
<li><p><u><a href="https://developer.apple.com/library/ios/documentation/LocalAuthentication/Reference/LAContext_Class/index.html#//apple_ref/occ/cl/LAContext">https://developer.apple.com/library/ios/documentation/LocalAuthentication/Reference/LAContext_Class/index.html#//apple_ref/occ/cl/LAContext</a> </u></p></li>
<li><p><u><a href="http://hayageek.com/ios-touch-id-authentication-api/">http://hayageek.com/ios-touch-id-authentication-api/</a> </u></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Git命令更简单（Git alias）]]></title>
    <link href="http://strivingboy.github.io/blog/2014/09/07/git-aliase/"/>
    <updated>2014-09-07T11:10:44+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/09/07/git-aliase</id>
    <content type="html"><![CDATA[<p>简单使用 git 命令的方式莫过于添加别名了，alias时linux下一个常用命令详见：<u><a href="http://en.wikipedia.org/wiki/Alias_">http://en.wikipedia.org/wiki/Alias_</a>(command) </u></p>

<p><strong>如何添加别名</strong></p>

<p>假设我们想用 <code>git ci</code>代替<code>git commit</code>, 我们可以添加如下命令到 <code>~/.gitconfig</code> 文件中</p>

<pre><code>［alias］
    ci = commit
</code></pre>

<p>如果不习惯手动编辑 config 文件，也可以使用命令 <code>git config alias.ci commit</code>来代替，如果想在自己机器的任何地方都使用改别名，则可添加 <code>--global</code> 标记</p>

<pre><code>git config --global alias.ci commit
</code></pre>

<!--more-->


<p><strong>常用别名</strong></p>

<pre><code>[alias]
  st = status
  ci = commit
  br = branch
  co = checkout
  df = diff
  ad=add
  cp = cherry-pick
  lg = log -p
</code></pre>

<p><strong>其他别名</strong></p>

<p>1.初始化git仓库</p>

<p><code>this = !git init &amp;&amp; git add . &amp;&amp; git commit -m \"initial commit\"</code></p>

<p>2.暂存</p>

<p><code>sl = stash list</code></p>

<p><code>sa = stash apply</code></p>

<p><code>ss = stash save</code></p>

<p>2.删除已经删除的文件</p>

<p><code>rd = git rm $(git ls-files --deleted) </code></p>

<p>3.清空未暂存的文件</p>

<p><code>cd = git clean -df</code></p>

<p>4.撤销本地所有修改</p>

<p><code>cl = git checkout .</code></p>

<p>5.列出所有别名</p>

<p><code>alias = config --get-regexp 'alias.*'</code></p>

<p>以上是我的常用git 别名，其他有意思的请在下面评论哈&hellip;..</p>

<p><strong> 参考链接 </strong></p>

<ul>
<li><u><a href="http://en.wikipedia.org/wiki/Alias_">http://en.wikipedia.org/wiki/Alias_</a>(command) </u></li>
<li><u><a href="http://git-scm.com/docs/">http://git-scm.com/docs/</a> </u></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 使用基础(二)]]></title>
    <link href="http://strivingboy.github.io/blog/2014/08/09/git-ji-chu-er/"/>
    <updated>2014-08-09T23:09:56+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/08/09/git-ji-chu-er</id>
    <content type="html"><![CDATA[<p><strong>git checkout</strong></p>

<p><code>git checkout</code> 命令提供三种功能：1、查看文件历史修改 2、切换到某次提交（或某次提交的特定文件） 3、切换分支</p>

<p>用法：</p>

<pre><code>git checkout master
</code></pre>

<p>从当前分支切换到master分支</p>

<pre><code>git checkout &lt;commit&gt; &lt;file&gt;
</code></pre>

<p>将本地文件file 更新到 commit 次提交</p>

<!--more-->


<p>例子：</p>

<pre><code>git log --oneline 查看下历史提交如下：

```
ad90c97 modify link
9de0669 add oneline.png
b83c889 modify test.txt
```

git checkout ad90c97 查看修改内容

git checkout b83c889 test.txt 查看对test.txt 文件的修改
</code></pre>

<p><strong>git revert</strong></p>

<p><code>git revert</code> 命令用来撤销历史中的某次提交，并且不会撤销其后面的提交历史</p>

<p>用法：</p>

<pre><code>git revert &lt;commit&gt;
</code></pre>

<p>撤销 commit 次提交</p>

<p><strong>git reset</strong></p>

<p><code>git reset</code> 命令用来撤销历史中的某次提交，也会撤销其后面的提交历史以</p>

<p>用法：</p>

<pre><code>git revert &lt;commit&gt;
</code></pre>

<p>撤销 commit 次提交</p>

<pre><code>git revert --hard &lt;commit&gt;
</code></pre>

<p>将当前分之会退到 commit 提交，并且会撤销本地未提交的修改（不安全）</p>

<p><strong>git clean</strong></p>

<p><code>git clean</code> 命令用来移除本地未暂存的文件，相当于<code>git reset --hard</code></p>

<p>用法：</p>

<pre><code>git clean -df
</code></pre>

<p>移除本地未暂存的修改以及文件</p>

<p><strong>git rebase</strong></p>

<p><code>git rebase</code> 命令用来将一个分支移动到某个分支（如B分支），在B分支上作为最新的提交（结果相当于 git merge）</p>

<p>用法：</p>

<pre><code>git rebase &lt;base&gt;
</code></pre>

<p>将当前分支移动到base分支</p>

<p><strong>git merge</strong></p>

<p><code>git merge</code> 命令用来将一个分支合并到某个分支,合并的结果作为一次新的提交</p>

<p>用法：</p>

<pre><code>git merge &lt;branch&gt;
</code></pre>

<p>合并branch分支合并到当前分支，和<code>git rebase</code>的区别以及各自优缺点见这里: <strong><a href="http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88">git rebase vs git merge</a></strong></p>

<p><strong>git fetch</strong></p>

<p><code>git fetch</code> 命令用来获取远端仓库最新代码到本地,不会自动合并（相当于开了一个tmp分支）</p>

<p>用法：</p>

<pre><code>git fetch &lt;remote&gt; 或 git fetch &lt;remote&gt; &lt;branch&gt;
</code></pre>

<p><strong>git pull</strong></p>

<p><code>git pull</code> 命令用来获取远端仓库最新代码并且和本地代码自动合并</p>

<p>用法：</p>

<pre><code>git pull &lt;remote&gt; 
</code></pre>

<p>相当于：git fetch <remote> ＋ git merge origin/<current-branch>.</p>

<pre><code>git pull --rebase &lt;remote&gt;
</code></pre>

<p>相当于：git fetch <remote> + git rebase origin/<current-branch>.</p>

<p>实际上，很多开发者都使用 <code>git pull --rebase</code> git 也提供了对应的配置如下：</p>

<pre><code>git config --global branch.autosetuprebase always
</code></pre>

<p>详细理由见这里： <strong><a href="http://stackoverflow.com/questions/18930527/difference-between-git-pull-and-git-pull-rebase">git pull 和 git pull &ndash;rebase的不同</a></strong></p>

<p><strong>git push</strong></p>

<p><code>git push</code> 命令用来将本地提交推送到远程仓库</p>

<p>用法：</p>

<pre><code>git push &lt;remote&gt; &lt;branch&gt;
</code></pre>

<p><code>git push &lt;remote&gt; --tags</code> 将本地标签推送到远端，默认标签不会自动推送</p>

<p><strong>git remote</strong></p>

<p><code>git remote</code> 命令用来列出每个远程库的简短名字</p>

<p>用法：</p>

<pre><code>git remote
</code></pre>

<p>要查看当前配置有哪些远程仓库，可以用<code>git remote</code>命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库</p>

<pre><code>git remote -v 
</code></pre>

<p>结果如下：</p>

<pre><code>origin  https://github.com/strivingboy/strivingboy.github.com.git (fetch)
origin  https://github.com/strivingboy/strivingboy.github.com.git (push)
</code></pre>

<p>显示对应的克隆地址</p>

<pre><code>git remote add &lt;shortname&gt; &lt;url&gt;
</code></pre>

<p>添加一个新的远程仓库，可以指定一个简单的名字 shortname，以便将来引用</p>

<pre><code>git remote rm &lt;shortname&gt;
</code></pre>

<p>删除远端名为shortname的仓库</p>

<pre><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;
</code></pre>

<p>将远程仓库 old-name 重命名为 new-name</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 使用基础(一)]]></title>
    <link href="http://strivingboy.github.io/blog/2014/08/03/git-ji-chu/"/>
    <updated>2014-08-03T10:33:16+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/08/03/git-ji-chu</id>
    <content type="html"><![CDATA[<p>对于git的学习推荐一下资料：</p>

<ul>
<li>GitPro:<u><a href="http://git-scm.com/book/zh">http://git-scm.com/book/zh</a> </u> 很不错的入门书籍</li>
<li>Git命令在线文档: <u><a href="http://git-scm.com/docs/">http://git-scm.com/docs/</a> </u>非常全面</li>
<li>Git权威指南: <u><a href="http://book.douban.com/subject/6526452/">http://book.douban.com/subject/6526452/</a> </u> 中国人写的比较不错的Git书籍</li>
</ul>


<p>如果不想敲 git 命令来使用 git，推荐一个非常不错的 git 图形画工具:</p>

<p><u> <a href="http://www.sourcetreeapp.com/">http://www.sourcetreeapp.com/</a> </u>  各个平台下都有，更新也非常快</p>

<p>要高效快速的使用git,还是建议学习使用git 命令，使用git 也有一段时间了，也准备开始写写技术博客，于是搭建了自己的github博客，记录下自己的学习以及思考，也方便自己查阅。</p>

<!--more-->


<p>本文参考：<u><a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository">https://www.atlassian.com/git/tutorials/setting-up-a-repository</a> </u></p>

<p><strong>git init</strong></p>

<p><code>git init</code> 命令用来创建一个新的git仓库，git 大部分命令都是再git仓库下运行</p>

<p>用法：</p>

<pre><code>git init
</code></pre>

<p>将当前目录转换为 git 仓库</p>

<pre><code>git init &lt;directory&gt;
</code></pre>

<p>将特定目录转换为 git 仓库</p>

<pre><code>git init --bare 
</code></pre>

<p>初始化一个空的（裸的） git 仓库，它不包含工作目录，并且不能提交编辑和提交修改，该仓库主要用于远端服务器管理代码，保存git历史提交的版本信息，防止冲突。如下说明：</p>

<p>比如:A用户在该目录（就称为远端仓库）下执行git操作，且有两个分支(master 和 branchA)，当前在master分支下。B用户想把自己在本地仓库（就称为本地仓库）的master分支的更新提交到远端仓库的master分支，想当然的使用：</p>

<pre><code>git push origin master:master
</code></pre>

<p>于是乎出现问题：因为远端仓库的A用户正在master的分支上操作，而B又要把更新提交到这个master分支上，当然会出现错误(冲突)。但如果是往远端仓库中空闲的分支上提交还是可以的，比如</p>

<pre><code>git push origin master:branchB 
</code></pre>

<p>还是可以成功的, 解决办法就是使用”git init –bare”方法创建一个所谓的裸仓库,也是最好把远端仓库初始化成bare仓库的原因，服务器上部署git 请参考：<a href="http://git-scm.com/book/zh/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2-Git">服务器上部署 Git</a></p>

<p>例子：</p>

<pre><code>cd path/repo
git init
</code></pre>

<p><strong>git clone</strong></p>

<p><code>git clone</code> 命令用来复制一个已经存在的 git 仓库，相当于 <code>svn checkout</code></p>

<p>用法：</p>

<pre><code>git clone &lt;repo&gt;
</code></pre>

<p>复制远端仓库 repo 到本地机器</p>

<pre><code>git clone &lt;repo&gt; &lt;directory&gt;
</code></pre>

<p>复制远端仓库 repo directory目录到本地机器</p>

<p>例子：</p>

<pre><code>git clone https://example.com/path/project_name.git ~/project/
cd ~/project/project_name
#Start working on the project
</code></pre>

<p><strong>git config</strong></p>

<p><code>git config</code> 命令用来配置本地安装的git</p>

<p>用法：</p>

<pre><code>git config user.name &lt;name&gt;
</code></pre>

<p>配置当前仓库修改提交作者名</p>

<pre><code>git config --global user.name &lt;name&gt;
</code></pre>

<p>通常情况下使用 &ndash;global 标记来配置本地所有仓库提交作者名</p>

<pre><code>git config --global user.email &lt;email&gt;
</code></pre>

<p>配置本地所有仓库提交email地址</p>

<pre><code>git config --global alias.&lt;alias-name&gt; &lt;git-command&gt;
</code></pre>

<p>为git命令创建简洁的别名，更多请参考：
<strong><a href="http://strivingboy.github.com/blog/2014/09/07/git-aliase/">让Git命令更简单（Git alias)</a></strong></p>

<p><strong>git add</strong></p>

<p><code>git add</code> 命令用来跟踪本地修改，为接下来的提交做准备</p>

<p>用法：</p>

<pre><code>git add &lt;file&gt;
</code></pre>

<p>跟踪对文件file的修改</p>

<pre><code>git add &lt;directory&gt;
</code></pre>

<p>跟踪对目录directory下所有修改</p>

<pre><code>git add .
</code></pre>

<p>跟踪本地工作目录下所有修改</p>

<p>例子：</p>

<pre><code>git add hello.txt
git commit
</code></pre>

<p><strong>git commit</strong></p>

<p><code>git commit</code>命令用来将本地跟踪的修改添加到本地仓库历史</p>

<p>用法：</p>

<pre><code>git commit
</code></pre>

<p>提交本地修改，启动文本编辑器，编辑提交信息</p>

<pre><code>git commit -m"message"
</code></pre>

<p>提交本地修改，直接编辑提交信息，不启动文本编辑器</p>

<pre><code>git commit -a 
</code></pre>

<p>提交本地工作目录下搜有修改，而不需要先 <code>git add</code>,相当于：<code>git add</code> 和 <code>git commit</code></p>

<pre><code>git commit -a -m"message"
</code></pre>

<p>同上直接编辑提交信息</p>

<p><strong>git status</strong></p>

<p><code>git status</code> 命令用于查看当前工作区和暂存区的状态信息</p>

<p>用法：</p>

<pre><code>git status
</code></pre>

<p>列出暂存过、未暂存过、未跟踪的文件</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># On branch master
</span><span class='line'># Changes to be committed:
</span><span class='line'># (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>#
</span><span class='line'>#modified: hello.txt
</span><span class='line'>#
</span><span class='line'># Changes not staged for commit:
</span><span class='line'># (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'># (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>#
</span><span class='line'>#new: test.txt
</span><span class='line'>#
</span><span class='line'># Untracked files:
</span><span class='line'># (use "git add &lt;file&gt;..." to include in what will be committed)
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure>


<p><strong>git log</strong></p>

<p>关于<code>git log</code> 请参考：<strong><a href="http://strivingboy.github.com/blog/2014/09/29/better-git-log/">更好的git log</a></strong></p>

<p>下一篇：<a href="http://strivingboy.github.com/blog/2014/08/09/git-ji-chu-er/">Git 使用基础(二)</a></p>
]]></content>
  </entry>
  
</feed>
