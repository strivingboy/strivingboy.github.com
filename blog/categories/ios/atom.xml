<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | 小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2015-10-22T23:49:38+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS9 3D Touch 实现]]></title>
    <link href="http://strivingboy.github.io/blog/2015/10/22/3d-touch/"/>
    <updated>2015-10-22T15:07:13+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/10/22/3d-touch</id>
    <content type="html"><![CDATA[<h2>iOS9 3D Touch 实现</h2>

<h3>3D Touch 是什么?</h3>

<blockquote><p>With iOS 9, new iPhone models add a third dimension to the user interface.</p>

<ul>
<li>A user can now press your Home screen icon to immediately access functionality provided by your app.</li>
<li>Within your app, a user can now press views to see previews of additional content and gain accelerated access to features.</li>
</ul>
</blockquote>

<p>简单来说3D Touch就是通过区分轻按和重按Home键来进行不同的用户交互。</p>

<!--more-->


<h3>模拟器如何测试?</h3>

<p>github 大神写了一个插件在Xcode 7模拟器上调试 3D Touch, 地址：<a href="https://github.com/DeskConnect/SBShortcutMenuSimulator">SBShortcutMenuSimulator</a></p>

<p>测试步骤：</p>

<ul>
<li>Step1:终端 git clone <a href="https://github.com/DeskConnect/SBShortcutMenuSimulator.git">https://github.com/DeskConnect/SBShortcutMenuSimulator.git</a></li>
<li>Step2: cd  SBShortcutMenuSimulator</li>
<li>Step3: make</li>
<li>Step4: 打开写好的程序，模拟器运行</li>
<li>Step5: xcrun simctl spawn booted launchctl debug system/com.apple.SpringBoard &ndash;environment DYLD_INSERT_LIBRARIES=$PWD/SBShortcutMenuSimulator.dylib</li>
<li>Step6:  xcrun simctl spawn booted launchctl stop com.apple.SpringBoard</li>
<li>Step7: echo &lsquo;strivingboy.-DTouchDemo&rsquo; | nc 127.0.0.1 8000   注意: &lsquo;strivingboy.-DTouchDemo&rsquo;  &lsquo;&#8217;里边写的是自己项目的Bundle identifier.</li>
</ul>


<p><strong>注意:  每次想要启动快速入口都要重复操作第8步.</strong></p>

<h3>应用场景有哪些？</h3>

<p>3D Touch的主要应用分为三块：</p>

<h4>1、Home Screen Quick Actions</h4>

<p>通过主屏幕的应用icon，使用3D Touch呼出一个菜单来展示应用核心功能如：</p>

<p><img src="./home_screen_quick_actions.png" "width = "126" height = "216" align=center /></p>

<p>菜单其它样式参考： <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/3DTouch.html#//apple_ref/doc/uid/TP40006556-CH71">3D Touch Human Interface Guidelines</a></p>

<h4>2、Peek and Pop</h4>

<p>这个功能可为是一套全新的用户交互机制，它可以预览下一个页面的视图，并且可以进行简单的操作如：</p>

<p><strong>Indication of peek availability</strong></p>

<p><img src="../images/preview_available.png" "width = "126" height = "216" align=center /></p>

<p><strong> Peek </strong></p>

<p><img src="../images/peek.png" "width = "126" height = "216" align=center /></p>

<p><strong> Peek quick actions</strong></p>

<p><img src="../images/peek_quick_actions.png" "width = "126" height = "216" align=center /></p>

<h4>3、Force Properties</h4>

<blockquote><p>In iOS 9, the <code>UITouch</code> class has two new properties to support custom implementation of 3D Touch in your app: <code>force</code> and <code>maximumPossibleForce</code>. For the first time on iOS devices, these properties let you detect and respond to touch pressure in the <code>UIEvent</code> objects your app receives.
The force of a touch has a high dynamic range, available as a floating point value to your app.</p></blockquote>

<p>iOS9为供了一个新的交互参数:力度。可以检测某一交互的力度值，来做相应的交互处理。</p>

<h3>如何实现？</h3>

<h4>1、Home Screen Quick Actions</h4>

<p>其实现有两种方式： 一：静态添加 二：动态添加</p>

<ul>
<li>静态添加只需要在项目中的plist文件中配置，然后安装就可以使用了如下图：</li>
</ul>


<p><img src="../images/plist.png" "width = "728" height = "110" align=center /></p>

<p>运行效果如下：</p>

<p><img src="../images/menu1.png" "width = "126" height = "216" align=center /></p>

<ul>
<li>静态添加即使用代码方式来添加，主要用到以下几个类：

<ul>
<li>UIApplicationShortcutIcon：创建ShortcutItem中图片icon</li>
<li>UIApplicationShortcutItem：创建3D Touch的ShortcutItem</li>
<li>UIMutableApplicationShortcutItem：创建可变3D Touch的ShortcutItem</li>
</ul>
</li>
</ul>


<p>如下代码：</p>

<pre><code class="objective-c">
        - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
            // Override point for customization after application launch.

            [self addShortcutItemDynamic:application];
            return YES;
        }

        - (void)addShortcutItemDynamic:(UIApplication *)application
        {
            UIApplicationShortcutItem *shareItem = [[UIApplicationShortcutItem alloc] initWithType:@"Share" localizedTitle:@"分享" localizedSubtitle:nil icon:[UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeShare] userInfo:nil];

            UIApplicationShortcutItem *payItem = [[UIApplicationShortcutItem alloc] initWithType:@"Play" localizedTitle:@"播放" localizedSubtitle:nil icon:[UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypePlay] userInfo:nil];

            UIApplicationShortcutItem *pauseItem = [[UIApplicationShortcutItem alloc] initWithType:@"Pause" localizedTitle:@"暂停" localizedSubtitle:nil icon:[UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypePause] userInfo:nil];

            application.shortcutItems = @[shareItem,payItem,pauseItem];
        }
</code></pre>

<p>运行效果如下：</p>

<p><img src="../images/menu4.png" "width = "126" height = "216" align=center /></p>

<p>相应点击事件实现方法:<code>- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void(^)(BOOL succeeded))completionHandler</code></p>

<p><strong>注： Quick Actions最多为4个(包含静态和动态)</strong></p>

<h4>2、Peek and Pop</h4>

<ul>
<li><p>Step1:检查设备是否支持3D Touch</p>

<p>  ViewContoller提供了一个属性：<code>traitCollection</code> 如：</p>

<pre><code>  - (BOOL)is3DTouchAvailable
  {
      if (self.traitCollection.forceTouchCapability == UIForceTouchCapabilityAvailable) {
      return YES;
      }
      return NO;
  }
</code></pre></li>
<li><p>Step2: 注册预览试图</p>

<p>  <code>- (id &lt;UIViewControllerPreviewing&gt;)registerForPreviewingWithDelegate:(id&lt;UIViewControllerPreviewingDelegate&gt;)delegate sourceView:(UIView *)sourceView NS_AVAILABLE_IOS(9_0)</code> 就是将sourceView这个视图注册允许使用3D Touch功能</p></li>
<li><p>Step3: 实现协议 <code>UIViewControllerPreviewingDelegate</code></p>

<pre><code>  - (nullable UIViewController *)previewingContext:(id &lt;UIViewControllerPreviewing&gt;)previewingContext viewControllerForLocation:(CGPoint)location
  {
      // 长按需要预览的类容
     previewingContext.sourceRect = CGRectMake(0, 0, previewingContext.sourceView.frame.size.width, previewingContext.sourceView.frame.size.height);
     PreviewViewController *vc = [[PreviewViewController alloc] initWithNibName:@"PreviewViewController" bundle:nil];
     vc.preferredContentSize = CGSizeMake(0, 300);
     return vc;

  }

  - (void)previewingContext:(id &lt;UIViewControllerPreviewing&gt;)previewingContext commitViewController:(UIViewController *)viewControllerToCommit
  {
      // 继续重按进入的页面
      [self.navigationController pushViewController:viewControllerToCommit animated:YES];
  }
</code></pre></li>
<li><p>Step4: 目标控制器PreViewController中以实现<code>- (NSArray&lt;id&lt;UIPreviewActionItem&gt;&gt; *)previewActionItems</code>也可以不实现则没有<code>ActionItem</code> 如：</p>

<pre><code>  - (NSArray&lt;id&lt;UIPreviewActionItem&gt;&gt; *)previewActionItems
  {

      UIPreviewAction *action1 = [UIPreviewAction actionWithTitle:@"action1"
                                                            style:UIPreviewActionStyleDefault handler:
                                  ^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController)
      {
          NSLog(@"action1 selected.");
      }];

      UIPreviewAction *action2 = [UIPreviewAction actionWithTitle:@"action2"
                                                            style:UIPreviewActionStyleSelected handler:
                                  ^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController)
      {
          NSLog(@"action2 selected.");
      }];
      UIPreviewAction *action3_1 = [UIPreviewAction actionWithTitle:@"action3-1"
                                                              style:UIPreviewActionStyleDefault handler:
                                    ^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController)
      {
          NSLog(@"action3-1 selected.");
      }];
      UIPreviewAction *action3_2 = [UIPreviewAction actionWithTitle:@"action3-2"
                                                              style:UIPreviewActionStyleDefault handler:
                                    ^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController)
      {
          NSLog(@"action3-2 selected.");
      }];
      UIPreviewActionGroup *action3 = [UIPreviewActionGroup actionGroupWithTitle:@"action3" style:UIPreviewActionStyleDestructive actions:@[action3_1, action3_2]];

      return @[action1, action2, action3];

  }
</code></pre></li>
</ul>


<p>效果如下：</p>

<p><img src="../images/peek-pop.gif" alt="image" /></p>

<h4>3、Force Properties</h4>

<p><code>UITouch</code>提供了下面两个属性来支付自定义 3D Touch 功能</p>

<pre><code>// Force of the touch, where 1.0 represents the force of an average touch
@property(nonatomic,readonly) CGFloat force NS_AVAILABLE_IOS(9_0);
// Maximum possible force with this input mechanism
@property(nonatomic,readonly) CGFloat maximumPossibleForce NS_AVAILABLE_IOS(9_0);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9  Universal Links （通用链接）]]></title>
    <link href="http://strivingboy.github.io/blog/2015/09/27/ios9/"/>
    <updated>2015-09-27T15:07:13+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/09/27/ios9</id>
    <content type="html"><![CDATA[<p><strong>&ldquo;What is Universal Links?&rdquo;</strong></p>

<p>Apple 推出通用链接：一种能够方便的通过传统 HTTP 链接来启动 APP, 使用相同的网址打开网站和 APP。</p>

<p>通过唯一的网址, 不需要特别的schema就可以链接一个特定的视图到APP 里面  。比如：在微信中使用了通用链接, 那么用户在Safari、UIWebView或者 WKWebView点击一个链接, iOS设备上的微信app怎会在微信里面自动打开这个页面, 如果没有安装则在Safrai中打开响应链接。</p>

<blockquote><p>NOTE:
Universal links let iOS 9 users open your app when they tap links to your website within WKWebView and UIWebView views and Safari pages, in addition to links that result in a call to openURL:, such as those that occur in Mail, Messages, and other apps.</p></blockquote>

<p>For users who are running versions of iOS earlier than 9.0, tapping a universal link to your website opens the link in Safari.</p>

<!--more-->


<p><strong>&ldquo;How to support Universal Links?&rdquo;</strong></p>

<ul>
<li><p>Step1:创建一个json 格式的apple-app-site-associatio 文件如下：</p>

<pre><code class="`` ">  {
      "applinks": {
          "apps": [],
          "details": [
              {
                  "appID": "9JA89QQLNQ.com.apple.wwdc",
                  "paths": [ "/wwdc/news/", "/videos/wwdc/2015/*" ]
              },
              {
                  "appID": "TeamID.BundleID2",
                  "paths": [ "*" ]
              }
          ]
      }
  }
</code></pre>

<p>  根据 paths 键设定允许的路径列表, 或只是一个星号如果你想打开 APP 而不管路径是 什么</p>

<p>  注意：paths 路径是大小写敏感的</p>

<blockquote><p>NOTE:The website paths you specify in the paths array are case sensitive.”</p></blockquote>

<p>  &ldquo;appID&#8221;组成部分：TeamID + BundleId TeamID可以从苹果开发账号页面也“Your   Account”下查看，BundleId就直接在工程里看了</p></li>
<li><p>Step2:上传 apple-app-site-association 文件</p>

<p>  注意：</p>

<p>  1、上传到web server根目录下</p>

<p>  2、web server 需要支持https,客户端需要通告https访问，并且不支持任何重定向</p>

<blockquote><p>upload it to the root of your HTTPS web server. The file needs to be accessible via HTTPS—without any redirects—at <a href="https://">https://</a><domain>/apple-app-site-association. Next, you need to handle universal links in your app.</p></blockquote></li>
<li><p>Step3:在 APP 里处理通用链接</p>

<ul>
<li><p>1、添加域名到 Capabilities</p>

<p>  在 Xcode 的 capabilities 里 添加你的 APP 域名, 必须用 applinks: 前置它   <img src="/images/domain.png" alt="" />
  这将使APP从上门的域名请求Step2中创建的JSON 文件 apple-app-site-association。当你第一次启动 APP，它会从 <a href="https://domain.com/apple-app-site-association">https://domain.com/apple-app-site-association</a> 下载这个文件。</p></li>
<li><p>2、在 AppDelegate 里支持通用链接</p></li>
</ul>


<p>  实现：
   <code>- (BOOL)application:(UIApplication *)application
   continueUserActivity:(NSUserActivity *)userActivity
     restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler</code>方法，如下：</p>

<p>  <img src="/images/delegate.png" alt="" /></p>

<p>  当 userActivity 是 NSUserActivityTypeBrowsingWeb 类型, 则意味着它已经由通用链接 API 代理。这样的话, 它保证用户打开的 URL 将有一个非空的 webpageURL 属性</p></li>
</ul>


<p><strong> apple 官网地址 </strong></p>

<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2">通用链接 Universal Links</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios 循环滚动 cycleScrollView]]></title>
    <link href="http://strivingboy.github.io/blog/2015/05/11/cyclescrollview/"/>
    <updated>2015-05-11T19:34:43+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/05/11/cyclescrollview</id>
    <content type="html"><![CDATA[<p>最近项目中需要一个循环滚动的效果，做法在此记录下哈</p>

<p>实现原理：UIScrollView适中保持三个view，即：前、中、后 三个视图，前后滑动都显示中间那个view</p>

<p>Demo 见：<strong><a href="https://github.com/strivingboy/CycleScrollViewDemo">CycleScrollViewDeomo</a></strong></p>

<p>效果如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/scroll.gif" width="320" height="568" alt="demo gif"/>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios7 在自定义leftBarButtonItem情况下的右滑返回问题]]></title>
    <link href="http://strivingboy.github.io/blog/2014/12/07/ios7-interactive-pop-with-custom-back-button/"/>
    <updated>2014-12-07T20:35:54+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/12/07/ios7-interactive-pop-with-custom-back-button</id>
    <content type="html"><![CDATA[<p>最近在做项目时发现一个问题：在自定义navigation 的 leftBarButtonItem后，右滑pop 手势失效了，google 了一把，解决过程如下，在此记录下：</p>

<p>问题：</p>

<pre><code class="objective-c">
- (void)viewDidLoad
{
  self.navigationItem.leftBarButtonItem = [self backButton];
}

- (UIBarButtonItem *)backButton
{
  UIImage *image = [UIImage imageNamed:@"back_button"];
  CGRect buttonFrame = CGRectMake(0, 0, image.size.width, image.size.height);

  UIButton *button = [[UIButton alloc] initWithFrame:buttonFrame];
  [button addTarget:self action:@selector(backButtonPressed) forControlEvents:UIControlEventTouchUpInside];
  [button setImage:[UIImage imageNamed:normalImage] forState:UIControlStateNormal];

  UIBarButtonItem *item; = [[UIBarButtonItem alloc] initWithCustomView:button];

  return item;
}
</code></pre>

<!--more-->


<p>当写完上述代码后，就会发现，iOS7提供的右滑返回手势不起作用了，这篇<a href="http://stuartkhall.com/posts/ios-7-development-tips-tricks-hacks">ios 7 Tips</a>文章中给出了一个快速的解决方法：</p>

<pre><code class="objective-c">
self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]
                                             initWithImage:img
                                             style:UIBarButtonItemStylePlain
                                             target:self
                                             action:@selector(onBack:)];
self.navigationController.interactivePopGestureRecognizer.delegate = (id&lt;UIGestureRecognizerDelegate&gt;)self;
</code></pre>

<p>经过测试发现当 push 一个 viewController后快速 右滑返回会导致崩溃， 也就是说在当push动画还没完成时去滑动返回， navigation controller 还在引用 viewController， 调试模式下回看到如下log:</p>

<p><em>nested pop animation can result in corrupted navigation bar</em></p>

<p>下来就是想办法在动画过程中禁止滑动手势，于是就有了下面的解决方法：</p>

<pre><code class="objective-c">@interface BaseNavigationController : UINavigationController &lt;UINavigationControllerDelegate, UIGestureRecognizerDelegate&gt;
@end

@implementation BaseNavigationController

- (void)viewDidLoad
{
  __weak BaseNavigationController *weakSelf = self;

  if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])
  {
    self.interactivePopGestureRecognizer.delegate = weakSelf;
    self.delegate = weakSelf;
  }
}

// Hijack the push method to disable the gesture

- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated
{
  if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])
    self.interactivePopGestureRecognizer.enabled = NO;

  [super pushViewController:viewController animated:animated];
}

#pragma mark UINavigationControllerDelegate

- (void)navigationController:(UINavigationController *)navigationController
       didShowViewController:(UIViewController *)viewController
                    animated:(BOOL)animate
{
  // Enable the gesture again once the new controller is shown

  if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])
    self.interactivePopGestureRecognizer.enabled = YES;
}
@end
</code></pre>

<p><strong> 参考链接 </strong></p>

<ul>
<li><u><a href="http://stuartkhall.com/posts/ios-7-development-tips-tricks-hacks">http://stuartkhall.com/posts/ios-7-development-tips-tricks-hacks</a> </u></li>
<li><u><a href="http://keighl.com/post/ios7-interactive-pop-gesture-custom-back-button/">http://keighl.com/post/ios7-interactive-pop-gesture-custom-back-button/</a> </u></li>
</ul>

]]></content>
  </entry>
  
</feed>
