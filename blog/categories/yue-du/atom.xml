<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 阅读 | 小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/blog/categories/yue-du/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2015-10-23T00:00:13+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读 iOS核心动画高级技巧]]></title>
    <link href="http://strivingboy.github.io/blog/2015/10/09/ios/"/>
    <updated>2015-10-09T09:42:13+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/10/09/ios</id>
    <content type="html"><![CDATA[<h3>1、什么是图层和视图？</h3>

<ul>
<li><p>视图：一个视图就是在屏幕上显示的一个矩形块（比如图片，文字或者视频），它能够拦截类似于鼠标点击或者触摸手势等用户输入。视图在层级关系中可以互相嵌套，一个视图可以管理它的所有子视图的位置.在iOS当中，所有的视图都从一个叫做UIVIew的基类派生而来，UIView可以处理触摸事件，可以支持基于Core Graphics绘图，可以做仿射变换（例如旋转或者缩放），或者简单的类似于滑动或者渐变的动画。</p></li>
<li><p>图层：CALayer类在概念上和UIView类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内容（像图片，文本或者背景色），管理子图层的位置。它们有一些方法和属性用来做动画和变换。</p></li>
</ul>


<h3>区别:是否处理交互</h3>

<p> CAlayer和UIView最大的不同是CALayer不处理用户的交互。CALayer并不清楚具体的响应链（iOS通过视图层级关系用来传送触摸事件的机制），于是它并不能够响应事件，即使它提供了一些方法来判断是否一个触点在图层的范围之内。</p>

<h3>关系:平行的层级</h3>

<p>每一个UIview都有一个CALayer实例的图层属性，也就是所谓的backing layer，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。图层才是真正用来在屏幕上显示和做动画，UIView仅仅是对它的一个封装，提供了一些iOS类似于处理触摸的具体功能，以及Core Animation底层方法的高级接口。</p>

<!--more-->


<h3>为什么iOS要基于UIView和CALayer提供两个平行的层级关系呢？</h3>

<p>原因在于要做职责分离，这样也能避免很多重复代码。在iOS和Mac OS两个平台上，事件和用户交互有很多地方的不同，基于多点触控的用户界面和基于鼠标键盘有着本质的区别，这就是为什么iOS有UIKit和UIView，但是Mac OS有AppKit和NSView的原因。他们功能上很相似，但是在实现上有着显著的区别。</p>

<p>绘图，布局和动画，相比之下就是类似Mac笔记本和桌面系列一样应用于iPhone和iPad触屏的概念。把这种功能的逻辑分开并应用到独立的Core Animation框架，苹果就能够在iOS和Mac OS之间共享代码，使得对苹果自己的OS开发团队和第三方开发者去开发两个平台的应用更加便捷。</p>

<p>实际上，这里并不是两个层级关系，而是四个，每一个都扮演不同的角色，除了视图层级和图层树之外，还存在<strong>呈现树</strong>和<strong>渲染树</strong>。</p>

<h3>2、图层的能力</h3>

<p>如果说CALayer是UIView内部实现细节，那我们为什么要全面地了解它呢？苹果当然为我们提供了优美简洁的UIView接口，那么我们是否就没必要直接去处理Core Animation的细节了呢？</p>

<p>某种意义上说的确是这样，对一些简单的需求来说，我们确实没必要处理CALayer，因为苹果已经通过UIView的高级API间接地使得动画变得很简单。</p>

<p>但是这种简单会不可避免地带来一些灵活上的缺陷。如果你略微想在底层做一些改变，或者使用一些苹果没有在UIView上实现的接口功能，这时除了介入Core Animation底层之外别无选择。</p>

<p>我们已经证实了图层不能像视图那样处理触摸事件，那么他能做哪些视图不能做的呢？这里有一些UIView没有暴露出来的CALayer的功能：</p>

<ul>
<li>阴影，圆角，带颜色的边框</li>
<li>3D变换</li>
<li>非矩形范围</li>
<li>透明遮罩</li>
<li>多级非线性动画</li>
</ul>


<h4>CALayer contents属性</h4>

<p>CALayer 有一个属性叫做contents，这个属性的类型被定义为id，意味着它可以是任何类型的对象。在这种情况下，你可以给contents属性赋任何值，你的app仍然能够编译通过。但是，在实践中，如果你给contents赋的不是CGImage，那么你得到的图层将是空白的。</p>

<p>contents这个奇怪的表现是由Mac OS的历史原因造成的。它之所以被定义为id类型，是因为在Mac OS系统上，这个属性对CGImage和NSImage类型的值都起作用。如果你试图在iOS平台上将UIImage的值赋给它，只能得到一个空白的图层。一些初识Core Animation的iOS开发者可能会对这个感到困惑。</p>

<p>头疼的不仅仅是我们刚才提到的这个问题。事实上，你真正要赋值的类型应该是CGImageRef，它是一个指向CGImage结构的指针。UIImage有一个CGImage属性，它返回一个&#8221;CGImageRef&#8221;,如果你想把这个值直接赋值给CALayer的contents，那你将会得到一个编译错误。因为CGImageRef并不是一个真正的Cocoa对象，而是一个Core Foundation类型。</p>

<p>尽管Core Foundation类型跟Cocoa对象在运行时貌似很像（被称作toll-free bridging），它们并不是类型兼容的，不过你可以通过bridged关键字转换。如果要给图层的寄宿图赋值，你可以按照以下这个方法：</p>

<pre><code class="objective-c">layer.contents = (__bridge id)image.CGImage;
</code></pre>

<h4>CALayer contentGravity属性</h4>

<p>我们加载的图片被拉伸的问题，解决方法就是把contentMode属性设置成更合适的值，像这样：</p>

<pre><code class="objective-c">view.contentMode = UIViewContentModeScaleAspectFit;
</code></pre>

<p>UIView大多数视觉相关的属性比如<code>contentMode</code>，对这些属性的操作其实是对对应图层的操作。</p>

<p>CALayer与<code>contentMode</code>对应的属性叫做<code>contentsGravity</code>，但是它是一个NSString类型，而不是像对应的UIKit部分，那里面的值是枚举。<code>contentsGravity</code>可选的常量值有以下一些：</p>

<ul>
<li><p>kCAGravityCenter</p></li>
<li><p>kCAGravityTop</p></li>
<li><p>kCAGravityBottom</p></li>
<li><p>kCAGravityLeft</p></li>
<li><p>kCAGravityRight</p></li>
<li><p>kCAGravityTopLeft</p></li>
<li><p>kCAGravityTopRight</p></li>
<li><p>kCAGravityBottomLeft</p></li>
<li><p>kCAGravityBottomRight</p></li>
<li><p>kCAGravityResize</p></li>
<li><p>kCAGravityResizeAspect</p></li>
<li><p>kCAGravityResizeAspectFill</p></li>
</ul>


<pre><code class="objective-c">
self.layerView.layer.contentsGravity = kCAGravityResizeAspect;

#### CALayer maskToBounds属性
现在我们的雪人总算是显示了正确的大小，不过你也许已经发现了另外一些事情：它超出了视图的边界。默认情况下，UIView仍然会绘制超过边界的内容或是子视图，在CALayer下也是这样的。

UIView有一个叫做clipsToBounds的属性可以用来决定是否显示超出边界的内容，CALayer对应的属性叫做masksToBounds，把它设置为YES，就会裁剪掉超过边界的部分。

#### CALayer contentsRect属性
CALayer的contentsRect属性允许我们在图层边框里显示寄宿图的一个子域。这涉及到图片是如何显示和拉伸的，所以要比contentsGravity灵活多了

和bounds，frame不同，contentsRect不是按点来计算的，它使用了单位坐标，单位坐标指定在0到1之间，是一个相对值（像素和点就是绝对值）。所以它们是相对与寄宿图的尺寸的。iOS使用了以下的坐标系统：

+ 点 —— 在iOS和Mac OS中最常见的坐标体系。点就像是虚拟的像素，也被称作逻辑像素。在标准设备上，一个点就是一个像素，但是在Retina设备上，一个点等于2*2个像素。iOS用点作为屏幕的坐标测算体系就是为了在Retina设备和普通设备上能有一致的视觉效果。

+ 像素 —— 物理像素坐标并不会用来屏幕布局，但是仍然与图片有相对关系。UIImage是一个屏幕分辨率解决方案，所以指定点来度量大小。但是一些底层的图片表示如CGImage就会使用像素，所以你要清楚在Retina设备和普通设备上，它们表现出来了不同的大小。

+ 单位 —— 对于与图片大小或是图层边界相关的显示，单位坐标是一个方便的度量方式， 当大小改变的时候，也不需要再次调整。单位坐标在OpenGL这种纹理坐标系统中用得很多，Core Animation中也用到了单位坐标。

默认的contentsRect是{0, 0, 1, 1}，这意味着整个寄宿图默认都是可见的，如果我们指定一个小一点的矩形，图片就会被裁剪.
事实上给contentsRect设置一个负数的原点或是大于{1, 1}的尺寸也是可以的。这种情况下，最外面的像素会被拉伸以填充剩下的区域。

contentsRect在app中最有趣的地方在于一个叫做image sprites（图片拼合）的用法。如果你有游戏编程的经验，那么你一定对图片拼合的概念很熟悉，图片能够在屏幕上独立地变更位置。抛开游戏编程不谈，这个技术常用来指代载入拼合的图片，跟移动图片一点关系也没有。

典型地，图片拼合后可以打包整合到一张大图上一次性载入。相比多次载入不同的图片，这样做能够带来很多方面的好处：内存使用，载入时间，渲染性能等等

2D游戏引擎入Cocos2D使用了拼合技术，它使用OpenGL来显示图片。不过我们可以使用拼合在一个普通的UIKit应用中，对！就是使用contentsRect

首先，我们需要一个拼合后的图表 —— 一个包含小一些的拼合图的大图片


#### CALayer contentsRect属性

`contentsCenter`其实是一个CGRect，它定义了一个固定的边框和一个在图层上可拉伸的区域。 改变`contentsCenter`的值并不会影响到寄宿图的显示，除非这个图层的大小改变了，你才看得到效果。默认情况下，`contentsCenter`是{0, 0, 1, 1}，这意味着如果大小（由`conttensGravity`决定）改变了,那么寄宿图将会均匀地拉伸开,这意味着我们可以随意重设尺寸，边框仍然会是连续的。它工作起来的效果和UIImage里的-resizableImageWithCapInsets: 方法效果非常类似，只是它可以运用到任何寄宿图

#### Custom Drawing

给contents赋CGImage的值不是唯一的设置寄宿图的方法。我们也可以直接用Core Graphics直接绘制寄宿图。能够通过继承UIView并实现-drawRect:方法来自定义绘制。

-drawRect: 方法没有默认的实现，因为对UIView来说，寄宿图并不是必须的，它不在意那到底是单调的颜色还是有一个图片的实例。如果UIView检测到-drawRect: 方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以 contentsScale的值。

如果你不需要寄宿图，那就不要创建这个方法了，这会造成CPU资源和内存的浪费，这也是为什么苹果建议：如果没有自定义绘制的任务就不要在子类中写一个空的-drawRect:方法。

当视图在屏幕上出现的时候 -drawRect:方法就会被自动调用。-drawRect:方法里面的代码利用Core Graphics去绘制一个寄宿图，然后内容就会被缓存起来直到它需要被更新（通常是因为开发者调用了-setNeedsDisplay方法，尽管影响到表现效果的属性值被更改时，一些视图类型会被自动重绘，如bounds属性）。虽然-drawRect:方法是一个UIView方法，事实上都是底层的CALayer安排了重绘工作和保存了因此产生的图片。

CALayer有一个可选的delegate属性，实现了CALayerDelegate协议，当CALayer需要一个内容特定的信息时，就会从协议中请求。CALayerDelegate是一个非正式协议，其实就是说没有CALayerDelegate @protocol可以让你在类里面引用啦。你只需要调用你想调用的方法，CALayer会帮你做剩下的。（delegate属性被声明为id类型，所有的代理方法都是可选的）。

当需要被重绘时，CALayer会请求它的代理给它一个寄宿图来显示。它通过调用下面这个方法做到的:
</code></pre>

<p>(void)displayLayer:(CALayer *)layer;</p>

<pre><code>
趁着这个机会，如果代理想直接设置`contents`属性的话，它就可以这么做，不然没有别的方法可以调用了。如果代理不实现`-displayLayer:`方法，CALayer就会转而尝试调用下面这个方法：
</code></pre>

<ul>
<li>(void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx;</li>
</ul>


<pre><code>
在调用这个方法之前，CALayer创建了一个合适尺寸的空寄宿图（尺寸由bounds和contentsScale决定）和一个Core Graphics的绘制上下文环境，为绘制寄宿图做准备，它作为ctx参数传入。

###3、图层几何学

#### 布局
UIView有三个比较重要的布局属性：frame，bounds和center，CALayer对应地叫做frame，bounds和position。为了能清楚区分，图层用了“position”，视图用了“center”，但是他们都代表同样的值。frame代表了图层的外部坐标（也就是在父图层上占据的空间），bounds是内部坐标（{0, 0}通常是图层的左上角），center和position都代表了相对于父图层*anchorPoint*锚点所在的位置。

#### 锚点 anchorPoint
视图的center属性和图层的position属性都指定了anchorPoint相对于父图层的位置。图层的anchorPoint通过position来控制它的frame的位置，你可以认为anchorPoint是用来移动图层的把柄。

默认来说，anchorPoint位于图层的中点，所以图层的将会以这个点为中心放置。anchorPoint属性并没有被UIView接口暴露出来，这也是视图的position属性被叫做“center”的原因。但是图层的anchorPoint可以被移动，比如你可以把它置于图层frame的左上角，于是图层的内容将会向右下角的position方向移动

####坐标系
和视图一样，图层在图层树当中也是相对于父图层按层级关系放置，一个图层的`position`依赖于它父图层的`bounds`，如果父图层发生了移动，它的所有子图层也会跟着移动。

这样对于放置图层会更加方便，因为你可以通过移动根图层来将它的子图层作为一个整体来移动，但是有时候你需要知道一个图层的*绝对*位置，或者是相对于另一个图层的位置，而不是它当前父图层的位置。

`CALayer`给不同坐标系之间的图层转换提供了一些工具类方法：

    - (CGPoint)convertPoint:(CGPoint)point fromLayer:(CALayer *)layer; 
    - (CGPoint)convertPoint:(CGPoint)point toLayer:(CALayer *)layer; 
    - (CGRect)convertRect:(CGRect)rect fromLayer:(CALayer *)layer;
    - (CGRect)convertRect:(CGRect)rect toLayer:(CALayer *)layer;

这些方法可以把定义在一个图层坐标系下的点或者矩形转换成另一个图层坐标系下的点或者矩形

####Z坐标轴

和`UIView`严格的二维坐标系不同，`CALayer`存在于一个三维空间当中。除了我们已经讨论过的`position`和`anchorPoint`属性之外，`CALayer`还有另外两个属性，`zPosition`和`anchorPointZ`，二者都是在Z轴上描述图层位置的浮点类型。

注意这里并没有更*深*的属性来描述由宽和高做成的`bounds`了，图层是一个完全扁平的对象，你可以把它们想象成类似于一页二维的坚硬的纸片，用胶水粘成一个空洞，就像三维结构的折纸一样。

`zPosition`属性在大多数情况下其实并不常用。在第五章，我们将会涉及`CATransform3D`，你会知道如何在三维空间移动和旋转图层，除了做变换之外，`zPosition`最实用的功能就是改变图层的*显示顺序*了。

通常，图层是根据它们子图层的`sublayers`出现的顺序来类绘制的，这就是所谓的*画家的算法*--就像一个画家在墙上作画--后被绘制上的图层将会遮盖住之前的图层，但是通过增加图层的`zPosition`，就可以把图层向相机方向*前置*，于是它就在所有其他图层的*前面*了（或者至少是小于它的`zPosition`值的图层的前面）。

这里所谓的“相机”实际上是相对于用户是视角，这里和iPhone背后的内置相机没任何关系。

#### Hit Testing
CALayer并不关心任何响应链事件，所以不能直接处理触摸事件或者手势。但是它有一系列的方法帮你处理事件：-containsPoint:和-hitTest:。

-containsPoint:接受一个在本图层坐标系下的CGPoint，如果这个点在图层frame范围内就返回YES

###4、视觉效果

#### 圆角
CALayer有一个叫做`conrnerRadius`的属性控制着图层角的曲率。它是一个浮点数，默认为0（为0的时候就是直角），但是你可以把它设置成任意值。默认情况下，这个曲率值只影响背景颜色而不影响背景图片或是子图层。不过，如果把`masksToBounds`设置成YES的话，图层里面的所有东西都会被截取。

#### 图层边框
CALayer另外两个非常有用属性就是`borderWidth`和`borderColor`。二者共同定义了图层边的绘制样式。这条线（也被称作stroke）沿着图层的bounds绘制，同时也包含图层的角。

`borderWidth`是以点为单位的定义边框粗细的浮点数，默认为0.borderColor定义了边框的颜色，默认为黑色。

`borderColor`是CGColorRef类型，而不是UIColor，所以它不是Cocoa的内置对象。不过呢，你肯定也清楚图层引用了borderColor，虽然属性声明并不能证明这一点。CGColorRef在引用/释放时候的行为表现得与NSObject极其相似。但是Objective-C语法并不支持这一做法，所以CGColorRef属性即便是强引用也只能通过assign关键字来声明

#### 阴影
iOS的另一个常见特性呢，就是阴影。阴影往往可以达到图层深度暗示的效果。也能够用来强调正在显示的图层和优先级（比如说一个在其他视图之前的弹出框），不过有时候他们只是单纯的装饰目的。

给`shadowOpacity`属性一个大于默认值（也就是0）的值，阴影就可以显示在任意图层之下。`shadowOpacity`是一个必须在0.0（不可见）和1.0（完全不透明）之间的浮点数。如果设置为1.0，将会显示一个有轻微模糊的黑色阴影稍微在图层之上。若要改动阴影的表现，你可以使用CALayer的另外三个属性：`shadowColor`，`shadowOffset`和`shadowRadius`。

显而易见，`shadowColor`属性控制着阴影的颜色，和`borderColor`和`backgroundColor`一样，它的类型也是`CGColorRef`。阴影默认是黑色，大多数时候你需要的阴影也是黑色的（其他颜色的阴影看起来是不是有一点点奇怪。。）。

`shadowOffset`属性控制着阴影的方向和距离。它是一个`CGSize`的值，宽度控制这阴影横向的位移，高度控制着纵向的位移。`shadowOffset`的默认值是 {0, -3}，意即阴影相对于Y轴有3个点的向上位移。

为什么要默认向上的阴影呢？尽管Core Animation是从图层套装演变而来（可以认为是为iOS创建的私有动画框架），但是呢，它却是在Mac OS上面世的，前面有提到，二者的Y轴是颠倒的。这就导致了默认的3个点位移的阴影是向上的。在Mac上，`shadowOffset`的默认值是阴影向下的，这样你就能理解为什么iOS上的阴影方向是向上的了.

#### shadowPath属性

我们已经知道图层阴影并不总是方的，而是从图层内容的形状继承而来。这看上去不错，但是实时计算阴影也是一个非常消耗资源的，尤其是图层有多个子图层，每个图层还有一个有透明效果的寄宿图的时候。

如果你事先知道你的阴影形状会是什么样子的，你可以通过指定一个`shadowPath`来提高性能。`shadowPath`是一个`CGPathRef`类型（一个指向`CGPath`的指针）。`CGPath`是一个Core Graphics对象，用来指定任意的一个矢量图形。我们可以通过这个属性单独于图层形状之外指定阴影的形状。

创建简单的阴影形状
</code></pre>

<p>@interface ViewController ()</p>

<p>@property (nonatomic, weak) IBOutlet UIView <em>layerView1;
@property (nonatomic, weak) IBOutlet UIView </em>layerView2;
@end</p>

<p>@implementation ViewController</p>

<p>-(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  //enable layer shadows
  self.layerView1.layer.shadowOpacity = 0.5f;
  self.layerView2.layer.shadowOpacity = 0.5f;</p>

<p>  //create a square shadow
  CGMutablePathRef squarePath = CGPathCreateMutable();
  CGPathAddRect(squarePath, NULL, self.layerView1.bounds);
  self.layerView1.layer.shadowPath = squarePath;
  CGPathRelease(squarePath);</p>

<p>  ￼//create a circular shadow
  CGMutablePathRef circlePath = CGPathCreateMutable();
  CGPathAddEllipseInRect(circlePath, NULL,self.layerView2.bounds);
  self.layerView2.layer.shadowPath = circlePath; <br/>
  CGPathRelease(circlePath);
}
@end</p>

<pre><code>
如果是一个矩形或者是圆，用`CGPath`会相当简单明了。但是如果是更加复杂一点的图形，`UIBezierPath`类会更合适，它是一个由UIKit提供的在CGPath基础上的Objective-C包装类。

#### 图层蒙板
通过`masksToBounds`属性，我们可以沿边界裁剪图形；通过`cornerRadius`属性，我们还可以设定一个圆角。但是有时候你希望展现的内容不是在一个矩形或圆角矩形。比如，你想展示一个有星形框架的图片，又或者想让一些古卷文字慢慢渐变成背景色，而不是一个突兀的边界。

使用一个32位有alpha通道的png图片通常是创建一个无矩形视图最方便的方法，你可以给它指定一个透明蒙板来实现。但是这个方法不能让你以编码的方式动态地生成蒙板，也不能让子图层或子视图裁剪成同样的形状。

CALayer有一个属性叫做`mask`可以解决这个问题。这个属性本身就是个CALayer类型，有和其他图层一样的绘制和布局属性。它类似于一个子图层，相对于父图层（即拥有该属性的图层）布局，但是它却不是一个普通的子图层。不同于那些绘制在父图层中的子图层，`mask`图层定义了父图层的部分可见区域。

`mask`图层的`Color`属性是无关紧要的，真正重要的是图层的轮廓。`mask`属性就像是一个饼干切割机，`mask`图层实心的部分会被保留下来，其他的则会被抛弃。

如果`mask`图层比父图层要小，只有在`mask`图层里面的内容才是它关心的，除此以外的一切都会被隐藏起来。
</code></pre>

<p>@interface ViewController ()</p>

<p>@property (nonatomic, weak) IBOutlet UIImageView *imageView;
@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];</p>

<p>//create mask layer
CALayer <em>maskLayer = [CALayer layer];
maskLayer.frame = self.layerView.bounds;
UIImage </em>maskImage = [UIImage imageNamed:@&ldquo;Cone.png&rdquo;];
maskLayer.contents = (__bridge id)maskImage.CGImage;</p>

<p>//apply mask to image layer￼
self.imageView.layer.mask = maskLayer;
}
@end
&#8220;`</p></li>
</ul>


<h4>组透明</h4>

<p>UIView有一个叫做<code>alpha</code>的属性来确定视图的透明度。CALayer有一个等同的属性叫做<code>opacity</code>，这两个属性都是影响子层级的。也就是说，如果你给一个图层设置了<code>opacity</code>属性，那它的子图层都会受此影响。</p>

<h3>5、专用图层</h3>

<h4>CAShapeLayer</h4>

<p>CAShapeLayer是一个通过矢量图形而不是bitmap来绘制的图层子类。你指定诸如颜色和线宽等属性，用CGPath来定义想要绘制的图形，最后CAShapeLayer就自动渲染出来了。当然，你也可以用Core Graphics直接向原始的CALyer的内容中绘制一个路径，相比直下，使用CAShapeLayer有以下一些优点：</p>

<ul>
<li>渲染快速。CAShapeLayer使用了硬件加速，绘制同一图形会比用Core Graphics快很多。</li>
<li>高效使用内存。一个CAShapeLayer不需要像普通CALayer一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。</li>
<li>不会被图层边界剪裁掉。一个CAShapeLayer可以在边界之外绘制。你的图层路径不会像在使用Core Graphics的普通CALayer一样被剪裁掉（如我们在第二章所见）。</li>
<li>不会出现像素化。当你给CAShapeLayer做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化。</li>
</ul>


<h3>6、隐式动画</h3>

<p>Core Animation基于一个假设，说屏幕上的任何东西都可以（或者可能）做动画。动画并不需要你在Core Animation中手动打开，相反需要明确地关闭，否则他会一直存在。</p>

<p>当你改变CALayer的一个可做动画的属性，它并不能立刻在屏幕上体现出来。相反，它是从先前的值平滑过渡到新的值。这一切都是默认的行为，你不需要做额外的操作。</p>

<p>这看起来这太棒了，似乎不太真实,所谓的<em>隐式</em>动画。之所以叫隐式是因为我们并没有指定任何动画的类型。我们仅仅改变了一个属性，然后Core Animation来决定如何并且何时去做动画。Core Animaiton同样支持<em>显式</em>动画，下章详细说明。</p>

<p>但当你改变一个属性，Core Animation是如何判断动画类型和持续时间的呢？实际上动画执行的时间取决于当前<em>事务</em>的设置，动画类型取决于<em>图层行为</em>。</p>

<p>事务实际上是Core Animation用来包含一系列属性动画集合的机制，任何用指定事务去改变可以做动画的图层属性都不会立刻发生变化，而是当事务一旦<em>提交</em>的时候开始用一个动画过渡到新值。</p>

<p>事务是通过<code>CATransaction</code>类来做管理，这个类的设计有些奇怪，不像你从它的命名预期的那样去管理一个简单的事务，而是管理了一叠你不能访问的事务。<code>CATransaction</code>没有属性或者实例方法，并且也不能用<code>+alloc</code>和<code>-init</code>方法创建它。但是可以用<code>+begin</code>和<code>+commit</code>分别来入栈或者出栈。</p>

<p>任何可以做动画的图层属性都会被添加到栈顶的事务，你可以通过<code>+setAnimationDuration:</code>方法设置当前事务的动画时间，或者通过<code>+animationDuration</code>方法来获取值（默认0.25秒）。</p>

<p>Core Animation在每个<em>run loop</em>周期中自动开始一次新的事务（run loop是iOS负责收集用户输入，处理定时器或者网络事件并且重新绘制屏幕的东西），即使你不显式的用<code>[CATransaction begin]</code>开始一次事务，任何在一次run loop循环中属性的改变都会被集中起来，然后做一次0.25秒的动画。</p>

<p>明白这些之后，我们就可以轻松修改变色动画的时间了。我们当然可以用当前事务的<code>+setAnimationDuration:</code>方法来修改动画时间，但在这里我们首先起一个新的事务，于是修改时间就不会有别的副作用。因为修改当前事务的时间可能会导致同一时刻别的动画（如屏幕旋转），所以最好还是在调整动画之前压入一个新的事务。</p>

<p>试想一下，如果<code>UIView</code>的属性都有动画特性的话，那么无论在什么时候修改它，我们都应该能注意到的。所以，如果说UIKit建立在Core Animation（默认对所有东西都做动画）之上，那么隐式动画是如何被UIKit禁用掉呢？</p>

<p>我们知道Core Animation通常对<code>CALayer</code>的所有属性（可动画的属性）做动画，但是<code>UIView</code>把它关联的图层的这个特性关闭了。为了更好说明这一点，我们需要知道隐式动画是如何实现的。</p>

<p>我们把改变属性时<code>CALayer</code>自动应用的动画称作<em>行为</em>，当<code>CALayer</code>的属性被修改时候，它会调用<code>-actionForKey:</code>方法，传递属性的名称。剩下的操作都在<code>CALayer</code>的头文件中有详细的说明，实质上是如下几步：</p>

<ul>
<li>图层首先检测它是否有委托，并且是否实现<code>CALayerDelegate</code>协议指定的<code>-actionForLayer:forKey</code>方法。如果有，直接调用并返回结果。</li>
<li>如果没有委托，或者委托没有实现<code>-actionForLayer:forKey</code>方法，图层接着检查包含属性名称对应行为映射的<code>actions</code>字典。</li>
<li>如果<code>actions字典</code>没有包含对应的属性，那么图层接着在它的<code>style</code>字典接着搜索属性名。</li>
<li>最后，如果在<code>style</code>里面也找不到对应的行为，那么图层将会直接调用定义了每个属性的标准行为的<code>-defaultActionForKey:</code>方法。</li>
</ul>


<p>所以一轮完整的搜索结束之后，<code>-actionForKey:</code>要么返回空（这种情况下将不会有动画发生），要么是<code>CAAction</code>协议对应的对象，最后<code>CALayer</code>拿这个结果去对先前和当前的值做动画。</p>

<p>于是这就解释了UIKit是如何禁用隐式动画的：每个<code>UIView</code>对它关联的图层都扮演了一个委托，并且提供了<code>-actionForLayer:forKey</code>的实现方法。当不在一个动画块的实现中，<code>UIView</code>对所有图层行为返回<code>nil</code>，但是在动画block范围之内，它就返回了一个非空值。我们可以用一个demo做个简单的实验（清单7.5）</p>

<p>清单7.5 测试UIView的<code>actionForLayer:forKey:</code>实现</p>

<pre><code class="objective-c">@interface ViewController ()

@property (nonatomic, weak) IBOutlet UIView *layerView;

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    //test layer action when outside of animation block
    NSLog(@"Outside: %@", [self.layerView actionForLayer:self.layerView.layer forKey:@"backgroundColor"]);
    //begin animation block
    [UIView beginAnimations:nil context:nil];
    //test layer action when inside of animation block
    NSLog(@"Inside: %@", [self.layerView actionForLayer:self.layerView.layer forKey:@"backgroundColor"]);
    //end animation block
    [UIView commitAnimations];
}

@end
</code></pre>

<p>运行程序，控制台显示结果如下：</p>

<pre><code>$ LayerTest[21215:c07] Outside: &lt;null&gt;
$ LayerTest[21215:c07] Inside: &lt;CABasicAnimation: 0x757f090&gt;
</code></pre>

<p>于是我们可以预言，当属性在动画块之外发生改变，<code>UIView</code>直接通过返回<code>nil</code>来禁用隐式动画。但如果在动画块范围之内，根据动画具体类型返回相应的属性，在这个例子就是<code>CABasicAnimation</code>（第八章“显式动画”将会提到）。</p>

<p>当然返回<code>nil</code>并不是禁用隐式动画唯一的办法，<code>CATransaction</code>有个方法叫做<code>+setDisableActions:</code>，可以用来对所有属性打开或者关闭隐式动画。如果在清单7.2的<code>[CATransaction begin]</code>之后添加下面的代码，同样也会阻止动画的发生：</p>

<pre><code>[CATransaction setDisableActions:YES];
</code></pre>

<p>总结一下，我们知道了如下几点</p>

<ul>
<li><code>UIView</code>关联的图层禁用了隐式动画，对这种图层做动画的唯一办法就是使用<code>UIView</code>的动画函数（而不是依赖<code>CATransaction</code>），或者继承<code>UIView</code>，并覆盖<code>-actionForLayer:forKey:</code>方法，或者直接创建一个显式动画（具体细节见第八章）。</li>
<li>对于单独存在的图层，我们可以通过实现图层的<code>-actionForLayer:forKey:</code>委托方法，或者提供一个<code>actions</code>字典来控制隐式动画。</li>
</ul>


<p>我们来对颜色渐变的例子使用一个不同的行为，通过给<code>colorLayer</code>设置一个自定义的<code>actions</code>字典。我们也可以使用委托来实现，但是<code>actions</code>字典可以写更少的代码。那么到底改如何创建一个合适的行为对象呢？</p>

<p>行为通常是一个被Core Animation<em>隐式</em>调用的<em>显式</em>动画对象。这里我们使用的是一个实现了<code>CATransaction</code>的实例，叫做<em>推进过渡</em>。</p>

<p>第八章中将会详细解释过渡，不过对于现在，知道<code>CATransition</code>响应<code>CAAction</code>协议，并且可以当做一个图层行为就足够了。结果很赞，不论在什么时候改变背景颜色，新的色块都是从左侧滑入，而不是默认的渐变效果。</p>

<p>清单7.6 实现自定义行为</p>

<pre><code class="objective-c">@interface ViewController ()

@property (nonatomic, weak) IBOutlet UIView *layerView;
@property (nonatomic, weak) IBOutlet CALayer *colorLayer;

@end

@implementation ViewController

- (void)viewDidLoad
{
    [super viewDidLoad];

    //create sublayer
    self.colorLayer = [CALayer layer];
    self.colorLayer.frame = CGRectMake(50.0f, 50.0f, 100.0f, 100.0f);
    self.colorLayer.backgroundColor = [UIColor blueColor].CGColor;
    //add a custom action
    CATransition *transition = [CATransition animation];
    transition.type = kCATransitionPush;
    transition.subtype = kCATransitionFromLeft;
    self.colorLayer.actions = @{@"backgroundColor": transition};
    //add it to our view
    [self.layerView.layer addSublayer:self.colorLayer];
}

- (IBAction)changeColor
{
    //randomize the layer background color
    CGFloat red = arc4random() / (CGFloat)INT_MAX;
    CGFloat green = arc4random() / (CGFloat)INT_MAX;
    CGFloat blue = arc4random() / (CGFloat)INT_MAX;
    self.colorLayer.backgroundColor = [UIColor colorWithRed:red green:green blue:blue alpha:1.0].CGColor;
}

@end
</code></pre>

<h3>7、显式动画</h3>

<p>属性动画作用于图层的某个单一属性，并指定了它的一个目标值，或者一连串将要做动画的值。属性动画分为两种：<em>基础</em>和<em>关键帧</em>。</p>

<p><em>基础</em>：动画其实就是一段时间内发生的改变，最简单的形式就是从一个值改变到另一个值，这也是<code>CABasicAnimation</code>最主要的功能</p>

<p><em>关键帧</em>：<code>CABasicAnimation</code>揭示了大多数隐式动画背后依赖的机制，这的确很有趣，但是显式地给图层添加<code>CABasicAnimation</code>相较于隐式动画而言，只能说费力不讨好。</p>

<p><code>CAKeyframeAnimation</code>是另一种UIKit没有暴露出来但功能强大的类。和<code>CABasicAnimation</code>类似，<code>CAKeyframeAnimation</code>同样是<code>CAPropertyAnimation</code>的一个子类，它依然作用于单一的一个属性，但是和<code>CABasicAnimation</code>不一样的是，它不限制于设置一个起始和结束的值，而是可以根据一连串随意的值来做动画。</p>

<p><em>关键帧</em>起源于传动动画，意思是指主导的动画在显著改变发生时重绘当前帧（也就是<em>关键</em>帧），每帧之间剩下的绘制（可以通过关键帧推算出）将由熟练的艺术家来完成。<code>CAKeyframeAnimation</code>也是同样的道理：你提供了显著的帧，然后Core Animation在每帧之间进行插入。</p>

<h3>8、缓冲</h3>

<h3><code>CAMediaTimingFunction</code></h3>

<p>那么该如何使用缓冲方程式呢？首先需要设置<code>CAAnimation</code>的<code>timingFunction</code>属性，是<code>CAMediaTimingFunction</code>类的一个对象。如果想改变隐式动画的计时函数，同样也可以使用<code>CATransaction</code>的<code>+setAnimationTimingFunction:</code>方法。</p>

<p>这里有一些方式来创建<code>CAMediaTimingFunction</code>，最简单的方式是调用<code>+timingFunctionWithName:</code>的构造方法。这里传入如下几个常量之一：</p>

<pre><code>kCAMediaTimingFunctionLinear 
kCAMediaTimingFunctionEaseIn 
kCAMediaTimingFunctionEaseOut 
kCAMediaTimingFunctionEaseInEaseOut
kCAMediaTimingFunctionDefault
</code></pre>

<p><code>kCAMediaTimingFunctionLinear</code>选项创建了一个线性的计时函数，同样也是<code>CAAnimation</code>的<code>timingFunction</code>属性为空时候的默认函数。线性步调对于那些立即加速并且保持匀速到达终点的场景会有意义（例如射出枪膛的子弹），但是默认来说它看起来很奇怪，因为对大多数的动画来说确实很少用到。</p>

<p><code>kCAMediaTimingFunctionEaseIn</code>常量创建了一个慢慢加速然后突然停止的方法。对于之前提到的自由落体的例子来说很适合，或者比如对准一个目标的导弹的发射。</p>

<p><code>kCAMediaTimingFunctionEaseOut</code>则恰恰相反，它以一个全速开始，然后慢慢减速停止。它有一个削弱的效果，应用的场景比如一扇门慢慢地关上，而不是砰地一声。</p>

<p><code>kCAMediaTimingFunctionEaseInEaseOut</code>创建了一个慢慢加速然后再慢慢减速的过程。这是现实世界大多数物体移动的方式，也是大多数动画来说最好的选择。如果只可以用一种缓冲函数的话，那就必须是它了。那么你会疑惑为什么这不是默认的选择，实际上当使用<code>UIView</code>的动画方法时，他的确是默认的，但当创建<code>CAAnimation</code>的时候，就需要手动设置它了。</p>

<p>最后还有一个<code>kCAMediaTimingFunctionDefault</code>，它和<code>kCAMediaTimingFunctionEaseInEaseOut</code>很类似，但是加速和减速的过程都稍微有些慢。它和<code>kCAMediaTimingFunctionEaseInEaseOut</code>的区别很难察觉，可能是苹果觉得它对于隐式动画来说更适合（然后对UIKit就改变了想法，而是使用<code>kCAMediaTimingFunctionEaseInEaseOut</code>作为默认效果），虽然它的名字说是默认的，但还是要记住当创建<em>显式</em>的<code>CAAnimation</code>它并不是默认选项（换句话说，默认的图层行为动画用<code>kCAMediaTimingFunctionDefault</code>作为它们的计时方法）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《如何把事情做的最好》]]></title>
    <link href="http://strivingboy.github.io/blog/2015/07/12/dobetter/"/>
    <updated>2015-07-12T10:38:11+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/07/12/dobetter</id>
    <content type="html"><![CDATA[<p>最近阅读了《如何把事情做的最好》这本书，在此写下读书笔记，这也是第一次写读书笔记，给自己一个坚持读书的动力哈哈。</p>

<p>开篇：
每个人生来都具备足够的潜力，每个人都能做到别人眼中难以企及的事情。请永远保持初学之心，勇敢面对人生挑战。
追求速成的浮躁气氛是当下社会的顽疾，若不加以重视，它将带来毁灭性的的后果。只有通过长期的努力，走上精益求精之路，坚持不追求短期目标的持续练习，才能把事情做到最好，最终获得成功。</p>

<h3>Tips1: 怎样才能把事情做到最好?</h3>

<p>   学习任何事情都要通过多次的练习和模仿，经过几个漫长的平台期，在量变引起质变之前，会有很长一段时间感到迷茫，并且进步缓慢。一旦你突破了平台期，学会的技能将伴随你一生，随着学习的深入和练习的深入，你渐渐觉得不那么困难了，并且乐在其中，最后成为一种本能。如何把事情做好，就像你学习抬手触摸额头一样，你同样可以学会英语、算法、编程，还可以学会更好的与别人交往，学会更好的工作和生活。有心之人任何时候都可以踏上精益求精之旅。</p>

<!--more-->


<h3>Tips2: 化难为易的精益求精之道</h3>

<p>坚持将事情做到极致。现在社会中大多数人都处于平台期，这种感觉是十分煎熬的。它让你感到挫败，不仅如此，还会慢慢的消耗你的进取心。这个练习的过程是无法跳过的，需要一点一滴的积累，成功没有捷径，你要将学习变成一种习惯。学习任何新的东西，都会首先经历一段快速成长期，随后回落到平台期。想要获得成功，需要艰苦的训练，不断磨练技艺，精益求精，循序渐进。</p>

<h3>Tips3: 认清自己：你属于哪种类型的人</h3>

<ul>
<li><p>浅尝辄止者</p>

<p>  浅尝辄止者对一切新东西充满好奇,一旦尝到学习曲线中最开始的那段快速成长期的甜头，就会被喜悦冲昏头脑,之后进入平台期是他们之前没有想到的，更是难以忍受。</p></li>
<li><p>强求突破者</p>

<p>  强求突破者往往具有坚定的性格，他们奋勇争先，从不安于第二名。他们重视结果，不管付出什么代价都要完成预定目标。但是当他们真正身处平台期的时候，那种毫无进步的感觉令他们无法忍受。他们开始质疑自己，盲目付出努力，他们对同事和亲朋好友的种种忠告和建议根本听不进去。总之，不论做什么事，强求突破者总是永不停歇的追求进步，然而又无法避免上升曲线过后的那段曲折回落。</p></li>
<li><p>安于现状者</p>

<p>  安于现状者的表现又是另一种样子，最初的进步之后，他们可能甘愿一直停在平台期。只要不耽误事，他们就无所谓进步，无所谓精益求精。</p></li>
</ul>


<h3>Tips4: 一份耕耘才能一份收获</h3>

<p>当你决定踏上精益求精之路时，你会突然发现周围的一切都与你所追求的格格不入。我们必须直视潜在的危机，坚持长期稳定的进步，发扬踏实向上的作风，摒弃不劳而获的思想。在精益求精的道路上我们任重而道远。</p>

<h3>Tips5: 热爱平台期</h3>

<p>一个人在精益求精之路上稳步前进，想要生活过的充实而幸福，那么首先要习惯平台期。如果做不到那么他将会在平台期无比纠结，并且心浮气躁的想要尽快摆脱这恼人的阶段，心浮气躁的他怎么能得到幸福呢？热爱平台期，才能充分享受进步的快感，才能坦然面对下一个平台期。热爱平台期，就是对平凡生活的热爱。</p>

<h3>Tips6: 把事情做好的5大要素</h3>

<ul>
<li><p>有效的指导</p>

<p>  找一位好导师学习基础知识，刻苦远比天分重要，请时刻记住，成功之路没有终点。正如日本剑道大师所说“求学之患，在于自满；为师之道，永无止境”.</p></li>
<li><p>持续练习</p>

<p>  练习不是简单的重复，对于那些追求精益求精境界的人来说, 他们不应仅仅把 练习看成一遍遍重复的动作，更不应把练习当成是简单的活动，而是要把练习和自身 融合起来,让它成为自己生活中必不可少的要素。这就是古老的东方文明所宣扬的“道”。你努力练习,练习就会造就你。可以说精益求精的成功之路就是练习铺就而成的.</p></li>
<li><p>保持初学的心态</p>

<p>  <strong>重复的力量:</strong> 伴随整个学习过程的是一遍又一遍的重复，越是基础的部分重复的次数越多。</p>

<p>  <strong>舍得放弃:</strong> 懂得改变在学习的不同阶段，随时都要保持归零的心态，以迎接不同阶段的挑战，越是自己熟悉的东西、熟悉的领域，这个挑战越艰巨。就像你在手中端着一杯牛奶，远处的桌上有一整瓶，如果舍不得放下手中的这一杯，就无法得到桌上的那一瓶。</p>

<p>  <strong>人人都是初学者:</strong> 时刻保持平和的心态，把自己看做新手或许是成功之路上最重要的——无论是追求事业成功，还是家庭和睦，无论是学打羽毛球，还是学习跳芭蕾都要如此。真正的成功者会时刻保持归零的心态。在这条求索之路上，人人都是初学者</p></li>
<li><p>胸有成竹</p>

<p>  大胆的想象自己希望的结果，开始之前先想象一个美好的愿景，然后为这个愿景去奋斗。就像我练习健美的时候，不止一次地想象自己获得宇宙先生之后的样子。”胸有成竹的从容，将一直存在于真正的成功者心中。</p></li>
<li><p>超越极限</p>

<p>  经验来自千百次的实践，学习是一场无止境的旅程，要有愚者精神，挑战极限是一门平衡的艺术，需要不断的将自己推向崩溃的边缘。当然，在你下决心做出挑战极限的行动之前，要确保自己已经经过刻苦训练并胸有成竹。然后，尽管去挑战极限吧。</p></li>
</ul>


<h3>Tips7: 把事情做到最好的高效方法</h3>

<ul>
<li>当你感到退步时，请挺住！</li>
<li>对旧有习惯时刻保持警惕</li>
<li>养成规律练习的好习惯</li>
<li>终生学习</li>
<li>激发潜能每个人都蕴含着自己想像不到的巨大潜力</li>
<li>不要压抑自己的潜能</li>
<li>保持身体健康</li>
<li>释放积极的力量</li>
<li>敢说真话</li>
<li>掌控负面情绪</li>
<li>分清轻重缓急</li>
<li>设定最后期限</li>
<li>拥有坚定的毅力</li>
<li>如何避免掉入陷阱巧妙</li>
<li>解决生活中的冲突</li>
<li>提高你的专注力</li>
<li>对自己负责</li>
<li>坦然面对胜败</li>
<li>切记：过犹不及</li>
<li>不要偷懒</li>
<li>好好保护自己</li>
<li>别沉迷胜利</li>
<li>拒绝虚荣</li>
<li>拥有适度的幽默感</li>
<li>坚持不懈</li>
<li>不要苛求完美</li>
</ul>


<p>结束语：</p>

<p>DNA决定了人的潜能，只有追求精益求精，才能将其充分释放。无论年龄、背景、资历，任何人都可以踏上这条求索之路。但下定决心踏上这条求索之路并不容易，伴随它而来的是持续学习、终生学习。在这条路上，光辉的成就永远在前方。你会不断进步、不断收获成功，但更重要的是在进步和成功之后继续前进。精益求精的求索将永不停歇。</p>

<p><strong>如何上路？请勇敢地踏出第一步。</strong></p>

<p><strong>何时动身？抓紧现在，时不我待。</strong></p>

<blockquote><p>大智若愚，愚者有时才是真正的智者。</p></blockquote>
]]></content>
  </entry>
  
</feed>
