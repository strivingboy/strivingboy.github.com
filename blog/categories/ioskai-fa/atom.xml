<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios开发 | 小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2014-09-29T15:34:26+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ios 8 Touch ID 使用]]></title>
    <link href="http://strivingboy.github.io/blog/2014/09/23/touchid-use/"/>
    <updated>2014-09-23T13:14:06+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/09/23/touchid-use</id>
    <content type="html"><![CDATA[<h2>Touch ID 介绍</h2>

<p>参考：<u><a href="http://www.imore.com/touch-id-ios-8-explained">http://www.imore.com/touch-id-ios-8-explained</a> </u></p>

<h2>Touch ID API</h2>

<p>前提：只有在装有iOS8的真机设备才能编译通过。</p>

<p><strong>Step1).</strong> 使用Touch ID API,首先需要导入:<code>LocalAuthentication.framework</code></p>

<pre><code class="objective-c">    #import &lt;LocalAuthentication/LAContext.h&gt; 
</code></pre>

<p><strong>Step2).</strong> 使用API，我们需要创建一个Authentication Context</p>

<pre><code class="objective-c">    LAContext *myContext = [[LAContext alloc] init];
</code></pre>

<p><strong>Step3).</strong> 检查当前Touch ID 是否可用,设备没有TouchID或者TouchID未开启返回false，有TouchID并开启返回true.</p>

<pre><code class="objective-c">
    - (BOOL)canEvaluatePolicy:(LAPolicy)policy error:(NSError * __autoreleasing *)error;
</code></pre>

<p><strong>Step4).</strong> 调用显示验证界面
&#8220;`objective-c</p>

<pre><code>- (void)evaluatePolicy:(LAPolicy)policy 
       localizedReason:(NSString *)localizedReason 
                 reply:(void(^)(BOOL success, NSError *error))reply;
</code></pre>

<pre><code>localizedReason：根据官方文档必须提供.

reply:验证成功 success == YES, 否则返回error,根据**error.code**可以得到具体的原因.

在`&lt;LocalAuthentication/LAError.h&gt;`头文件中可以看到如下定义：
</code></pre>

<pre><code>typedef NS_ENUM(NSInteger, LAError)
{
    /// Authentication was not successful, because user failed to provide valid credentials.
    LAErrorAuthenticationFailed = kLAErrorAuthenticationFailed,

    /// Authentication was canceled by user (e.g. tapped Cancel button).
    LAErrorUserCancel           = kLAErrorUserCancel,

    /// Authentication was canceled, because the user tapped the fallback button (Enter Password).
    LAErrorUserFallback         = kLAErrorUserFallback,

    /// Authentication was canceled by system (e.g. another application went to foreground).
    LAErrorSystemCancel         = kLAErrorSystemCancel,

    /// Authentication could not start, because passcode is not set on the device.
    LAErrorPasscodeNotSet       = kLAErrorPasscodeNotSet,

    /// Authentication could not start, because Touch ID is not available on the device.
    LAErrorTouchIDNotAvailable  = kLAErrorTouchIDNotAvailable,

    /// Authentication could not start, because Touch ID has no enrolled fingers.
    LAErrorTouchIDNotEnrolled   = kLAErrorTouchIDNotEnrolled,
} NS_ENUM_AVAILABLE(10_10, 8_0);
</code></pre>

<pre><code>
##Touch ID API 简单封装Demo

**TouchIdUtil.h**
</code></pre>

<pre><code>typedef NS_ENUM(NSInteger, TouchIdEvaluateResult)
{
    kTouchIdEvaluateResultSuccess,   // 验证成功
    kTouchIdEvaluateResultFailed,    // 验证失败
    kTouchIdEvaluateResultCancel,    // 点击取消按钮
    kTouchIdEvaluateResultFallback,  // 点击回退按钮
    kTouchIdEvaluateResultOther      // 未知结果
};

typedef void(^TouchIdEvaluateCallback)(TouchIdEvaluateResult result);

@interface TouchIdUtil : NSObject

+ (instancetype)sharedInstance;

// Touch Id 是否开启或设置
- (BOOL)canEvaluatePolicy;

// Touch Id 验证 callback回调已经抛到了主线程
- (void)evaluatePolicy:(NSString *)localizedReasion
         fallbackTitle:(NSString *)title
              callback:(TouchIdEvaluateCallback)cb;

@end
</code></pre>

<pre><code>**TouchIdUtil.m**
</code></pre>

<pre><code>#import "TouchIdUtil.h"
#import &lt;LocalAuthentication/LocalAuthentication.h&gt;

@implementation TouchIdUtil

+ (instancetype)sharedInstance
{
    static TouchIdUtil* instance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        instance = [[TouchIdUtil alloc] init];
    });
    return instance;
}

- (BOOL)canEvaluatePolicy
{
    LAContext *context = [[LAContext alloc] init];
    NSError *error;
    return [context canEvaluatePolicy: LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error];
}

- (void)evaluatePolicy:(NSString *)localizedReasion
         fallbackTitle:(NSString *)title
              callback:(TouchIdEvaluateCallback)cb
{
    LAContext *context = [[LAContext alloc] init];
    if (title) {
        context.localizedFallbackTitle = title;
    }

    NSString *myLocalizedReasonString = localizedReasion;
    __weak typeof (self) weakSelf = self;
    [context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics
             localizedReason:myLocalizedReasonString
                       reply:
     ^(BOOL succes, NSError *error) {
         if (succes) {
             [[weakSelf class] reportResultOnUI:kTouchIdEvaluateResultSuccess callback:cb];
         } else {
             switch (error.code) {
                 case LAErrorAuthenticationFailed:
                     [[weakSelf class] reportResultOnUI:kTouchIdEvaluateResultFailed callback:cb];
                     break;
                 case LAErrorUserCancel:
                     [[weakSelf class] reportResultOnUI:kTouchIdEvaluateResultCancel callback:cb];
                     break;
                 case LAErrorUserFallback:
                     [[weakSelf class] reportResultOnUI:kTouchIdEvaluateResultFallback callback:cb];
                     break;
                 default:
                     [[weakSelf class] reportResultOnUI:kTouchIdEvaluateResultOther callback:cb];
                     break;
             }
         }
     }];
}

+ (void)reportResultOnUI:(TouchIdEvaluateResult)result callback:(TouchIdEvaluateCallback)cb
{
    dispatch_async(dispatch_get_main_queue(), ^{
        cb(result);
    });
}

@end
</code></pre>

<p>&#8220;`<br/>
<strong> 问题总结 </strong></p>

<p>1.指纹识别3次错误会弹出系统“输入密码”数字键盘，而且这3次错误机会是系统所有应用共享</p>

<p>2.不要在 <code>evaluatePolicy:</code>方法中调用 <code>canEvaluatePolicy</code> <code>&lt;LocalAuthentication/LAContext.h&gt;</code>中有说明</p>

<p><strong> 参考链接 </strong></p>

<ul>
<li><p><u><a href="https://developer.apple.com/library/ios/documentation/LocalAuthentication/Reference/LAContext_Class/index.html#//apple_ref/occ/cl/LAContext">https://developer.apple.com/library/ios/documentation/LocalAuthentication/Reference/LAContext_Class/index.html#//apple_ref/occ/cl/LAContext</a> </u></p></li>
<li><p><u><a href="http://hayageek.com/ios-touch-id-authentication-api/">http://hayageek.com/ios-touch-id-authentication-api/</a> </u></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
