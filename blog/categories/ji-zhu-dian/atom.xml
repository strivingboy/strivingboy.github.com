<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术点 | 小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/blog/categories/ji-zhu-dian/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2015-07-19T15:55:28+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS9 新特性介绍]]></title>
    <link href="http://strivingboy.github.io/blog/2015/07/19/ios9/"/>
    <updated>2015-07-19T15:07:13+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/07/19/ios9</id>
    <content type="html"><![CDATA[<p>本文翻译 <a href="https://www.shinobicontrols.com/blog/ios9-day-by-day-index">iOS9 Day-by-Day</a> 中对iOS9新特性简单介绍下</p>

<ul>
<li><p><strong>三种搜索API</strong></p>

<p>  <strong>NSUserActivity:</strong>
  NSUserActivity是iOS 8专为Handoff推出的API，iOS 9之后得到了提升。现在用户只需提供元数据（metadata）就能搜索不同的activity（活动）了。换言之，Spotlight可以将activity编入索引，而NSUserActivity就好比网页浏览器的历史堆栈（history stack），使用户能在Spotlight上搜到最近的活动。</p>

<p>  <strong>Web Markup:</strong>
  Web Markup在网页上显示App的内容并编入Spotlight索引，如此一来即便没有安装某个App，苹果的索引器也能在网页上搜索特别的标记（markup），在Safari或Spotlight上显示搜索结果。
显示未安装App的搜索结果是一大亮点，有望为开发者带来更多潜在用户。公布在搜索API上的App深链接则储存在苹果的cloud index中。更多详情，请参阅苹果的（<a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-SW4">Web Markup使用指南</a>）”。</p>

<p>  <strong>CoreSpotlight:</strong>
  NSUserActivity帮助储存用户历史，而全新的Core Spotlight则能将App中的任何内容编入索引，实质是在用户设备上提供基础的Core Spotlight索引渠道，满足用户另外一个需求。</p></li>
</ul>


<!--more-->


<ul>
<li><p><strong>UI Testing</strong></p>

<p>  在Xcode7中，苹果介绍了一种新的方式来管理你的应用界面的测试工作。UI testing 允许你对 UI 元素进行查找，交互，验证属性和状态。在 Xcode7 中，UI testing 伴随着测试报告，并且和单元测试一起运行。 XCTest 是在 Xcode 5 时融入到测试框架的，在Xcode7 中，新增了对 UI 的测试能力。允许在特定点设置断言，查看UI当时的状态。</p>

<p>  <strong>Accessibility（辅助功能）:</strong>
  为了 UI Testing 能够工作，框架需要和你的众多元素直接建立连接，然后安排好操作。你可以设定义特别的点，或者在某个 UI 上创建 tweak，然后指定点击或者滑动操作。但是这在不同尺寸设备上就失效了。这时候 accessibility，就能提供帮助了。Accessibility 是苹果自家发布的一个框架，它可以自动记录你的操作流程，允许用户进行丰富的操作。你可以（也应该）让你的元素具备Accessibility的能力。有很多原因，比如说自定义的控件，不能够被自动发现。
UI Testing 有能力通过你的应用提供给 Accessibility 的特性，来对不同尺寸的设备进行测试提供解决方案。也保证了你在重新组织了一下你的 UI 之后，不必全部重新写一套测试。不仅能够帮助你测试自己的 UI，同时也能够对你的应用，更好的支持有一定身体障碍的人群使用而带来帮助。</p>

<p>  <strong>UI 录制 :</strong>一旦你设置好了你的 accessible UI,你将要创建 UI 的测试项。编写 UI 的测试是非常耗时，无聊的，如果你的 UI 比较复杂，也是非常困难的。感谢 Xcode7, 苹果介绍了 UI Recording. 他允许你新建、或者在已有项目中创建测试。当你打开时，测试代码会随着你在设备或模拟器上操作自动创建。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios 循环滚动 cycleScrollView]]></title>
    <link href="http://strivingboy.github.io/blog/2015/05/11/cyclescrollview/"/>
    <updated>2015-05-11T19:34:43+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/05/11/cyclescrollview</id>
    <content type="html"><![CDATA[<p>最近项目中需要一个循环滚动的效果，做法在此记录下哈</p>

<p>实现原理：UIScrollView适中保持三个view，即：前、中、后 三个视图，前后滑动都显示中间那个view</p>

<p>Demo 见：<strong><a href="https://github.com/strivingboy/CycleScrollViewDemo">CycleScrollViewDeomo</a></strong></p>

<p>效果如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/scroll.gif" width="320" height="568" alt="demo gif"/>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios7 在自定义leftBarButtonItem情况下的右滑返回问题]]></title>
    <link href="http://strivingboy.github.io/blog/2014/12/07/ios7-interactive-pop-with-custom-back-button/"/>
    <updated>2014-12-07T20:35:54+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/12/07/ios7-interactive-pop-with-custom-back-button</id>
    <content type="html"><![CDATA[<p>最近在做项目时发现一个问题：在自定义navigation 的 leftBarButtonItem后，右滑pop 手势失效了，google 了一把，解决过程如下，在此记录下：</p>

<p>问题：</p>

<pre><code class="objective-c">
- (void)viewDidLoad
{
  self.navigationItem.leftBarButtonItem = [self backButton];
}

- (UIBarButtonItem *)backButton
{
  UIImage *image = [UIImage imageNamed:@"back_button"];
  CGRect buttonFrame = CGRectMake(0, 0, image.size.width, image.size.height);

  UIButton *button = [[UIButton alloc] initWithFrame:buttonFrame];
  [button addTarget:self action:@selector(backButtonPressed) forControlEvents:UIControlEventTouchUpInside];
  [button setImage:[UIImage imageNamed:normalImage] forState:UIControlStateNormal];

  UIBarButtonItem *item; = [[UIBarButtonItem alloc] initWithCustomView:button];

  return item;
}
</code></pre>

<!--more-->


<p>当写完上述代码后，就会发现，iOS7提供的右滑返回手势不起作用了，这篇<a href="http://stuartkhall.com/posts/ios-7-development-tips-tricks-hacks">ios 7 Tips</a>文章中给出了一个快速的解决方法：</p>

<pre><code class="objective-c">
self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]
                                             initWithImage:img
                                             style:UIBarButtonItemStylePlain
                                             target:self
                                             action:@selector(onBack:)];
self.navigationController.interactivePopGestureRecognizer.delegate = (id&lt;UIGestureRecognizerDelegate&gt;)self;
</code></pre>

<p>经过测试发现当 push 一个 viewController后快速 右滑返回会导致崩溃， 也就是说在当push动画还没完成时去滑动返回， navigation controller 还在引用 viewController， 调试模式下回看到如下log:</p>

<p><em>nested pop animation can result in corrupted navigation bar</em></p>

<p>下来就是想办法在动画过程中禁止滑动手势，于是就有了下面的解决方法：</p>

<pre><code class="objective-c">@interface BaseNavigationController : UINavigationController &lt;UINavigationControllerDelegate, UIGestureRecognizerDelegate&gt;
@end

@implementation BaseNavigationController

- (void)viewDidLoad
{
  __weak BaseNavigationController *weakSelf = self;

  if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])
  {
    self.interactivePopGestureRecognizer.delegate = weakSelf;
    self.delegate = weakSelf;
  }
}

// Hijack the push method to disable the gesture

- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated
{
  if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])
    self.interactivePopGestureRecognizer.enabled = NO;

  [super pushViewController:viewController animated:animated];
}

#pragma mark UINavigationControllerDelegate

- (void)navigationController:(UINavigationController *)navigationController
       didShowViewController:(UIViewController *)viewController
                    animated:(BOOL)animate
{
  // Enable the gesture again once the new controller is shown

  if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])
    self.interactivePopGestureRecognizer.enabled = YES;
}
@end
</code></pre>

<p><strong> 参考链接 </strong></p>

<ul>
<li><u><a href="http://stuartkhall.com/posts/ios-7-development-tips-tricks-hacks">http://stuartkhall.com/posts/ios-7-development-tips-tricks-hacks</a> </u></li>
<li><u><a href="http://keighl.com/post/ios7-interactive-pop-gesture-custom-back-button/">http://keighl.com/post/ios7-interactive-pop-gesture-custom-back-button/</a> </u></li>
</ul>

]]></content>
  </entry>
  
</feed>
