<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git使用 | 小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/blog/categories/gitshi-yong/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2015-10-09T10:24:44+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[高效使用Git]]></title>
    <link href="http://strivingboy.github.io/blog/2015/06/17/git-doc/"/>
    <updated>2015-06-17T22:40:55+08:00</updated>
    <id>http://strivingboy.github.io/blog/2015/06/17/git-doc</id>
    <content type="html"><![CDATA[<p>最近给项目组小伙伴讨论了下如何高效使用git，于是在之前几篇基础上＋网络资料整理文档如下，在此记录下：</p>

<h3>核心概念</h3>

<p>谈到Git，最先需要明确的几个概念:</p>

<ul>
<li><p>WorkSpace：工作区，即从仓库中checkout出来的，需要通过Git进行版本控制的目录和文件，可以简单的理解为在文件系统里真实看到的文件</p></li>
<li><p>Stage(Index)：暂存区，或者叫做待提交更新区；在提交进入Repository之前，可以把所有的更新放在暂存区, 用 git add 的文件都在这里</p></li>
<li><p>Repository(Remote/Local)：仓库，一个存放在远端／本地的版本库，用git commit提交的文件就到Local Repository,用git push提交的文件就到Remote Repository</p></li>
<li><p>.git：存放Git管理信息的目录，初始化仓库的时候会自动创建。</p></li>
</ul>


<p>有了上面概念的了解，下面就开始上干货，为了方便图解，用xcode创建一个本地TestGit工程来取景</p>

<!--more-->


<h3>创建仓库</h3>

<p>这个没什么好说的就简单列下：</p>

<p><code>git init</code> 命令用来创建一个新的git仓库，大部分命令都是在git仓库下运行</p>

<p><code>git clone</code> 命令用来复制一个已经存在的 git 仓库</p>

<h3>跟踪本地修改（Stage）</h3>

<p><code>git add</code> 命令用来跟踪本地修改，为接下来的提交做准备，有以下三种姿势：</p>

<p><code>git add &lt;file&gt;</code> 跟踪单个文件(file)修改</p>

<p><code>git add &lt;directory&gt;</code> 跟踪目录(directory)下所有修改</p>

<p><code>git add .</code> 跟踪当前目录及子目录下所有修改</p>

<p>eg: 创建一个TestView.h .m文件 add 后， git status 后效果如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git1.png" width="406" height="164"/>
</div>


<p>上面的<code>gst</code> 是 <code>git status</code> 的别名，后面说下 <code>git alias</code> 接下来就是commit</p>

<h3>commit的几种姿势</h3>

<p><code>git commit</code> 提交本地修改，启动文本编辑器，编辑提交信息</p>

<p><code>git commit -m"message"</code> 提交本地修改，直接编辑提交信息，不启动文本编辑器</p>

<p><code>git commit -a</code>提交本地工作目录下所有修改，而不需要先 <code>git add</code>,相当于：<code>git add</code> 和 <code>git commit</code></p>

<p><code>git commit -am"message"</code>同 <code>git commit -a</code> 只是不启动文本编辑器</p>

<p>这时提交上面的修改如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git2.png" width="337" height="130"/>
</div>


<p>查看log如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git3.png" width="442" height="82"/>
</div>


<p>伙计们，有没有发现跟正常的git log 不一样的地方呢^_^, 请看后面 <strong>更好的changelog</strong></p>

<p>客官别急，还没出大招呢</p>

<p><code>git commit --amend -m"message"</code> 将当前的更改加入上一次commit中并更改最后一次commit的信息。其实观察可发现新的commit是替换了原先的commit，因为commit的hash已经变了。(ps:使用场景：当我们发现上次提交有遗漏的地方，想将修改加入上次提交时 用它是不是很方便^_^)</p>

<p>eg:修改了如下文件，想合并到上次提交</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git4.png" width="534" height="305"/>
</div>


<p>再来看提交纪录， 刚才的commit 1 修改为 commit 1 patch</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git5.png" width="518" height="49"/>
</div>


<p>OK，接下来献上<code>git checkout</code> <strong>重臣</strong>登场</p>

<h3>checkout 技能</h3>

<p>之所以将<code>git checkout</code> 称为<strong>重臣</strong>，因为它有两类技能：一个是分支相关的操作，另一个是可以恢复文件到之前的某个状态。</p>

<ul>
<li>创建分之和切换分之</li>
</ul>


<p><code>git checkout －b branch1</code>创建一个名为&#8221;branch1&#8221;的分支并切换过去，相当于 <code>git branch branch1</code> + <code>git checkout branch1</code></p>

<p>eg:创建分之 “branch1” 并做一次提交 “commit 2”</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git6.png" width="549" height="290"/>
</div>


<p>此刻log如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git7.png" width="531" height="55"/>
</div>


<ul>
<li>恢复到之前的某次提交</li>
</ul>


<p>继续在branch1上做两次提交 “commit 3” 和 “commit 4”, 这时想查看 &ldquo;commit 2&#8221;时代码的样子或作些修改，<code>git checkout &lt;hash&gt;</code> 就跑出来帮你了^_^</p>

<p>……在branch1分之上码着代码，小手抖了一下，嚓，上次提交代码有问题，这时，三位小弟蹦出来，<code>git reset</code>, <code>git checkout</code>, <code>git revert</code> 小弟出来到：哥哥别慌，选我、选我……</p>

<h3>reset, checkout, revert竞选</h3>

<p><code>git reset</code>、<code>git checkout</code>和<code>git revert</code>都是用来撤销对代码仓库的各种修改，前两个命令可以操作提交或单个文件，他们如此相似，来各自秀下自己的技能：</p>

<p><code>Reset</code>:命令可以撤销当前分支的某些提交，如：<code>git reset HEAD^2</code>当前分支回退了两次提交，<code>Reset</code>命令对于想撤销某些提交（前提是当前分支只有自己提交）时非常方便，<code>Reset</code>命令有一下标记：</p>

<ul>
<li>&ndash;soft:使用该标记不会影响暂存区和工作区</li>
<li>&ndash;mixed:使用该标记后，暂存区会更新到了指定的提交，工作区不影响，该标记是默认的</li>
<li>&ndash;hard:暂存区和工作区均更新到指定提交</li>
</ul>


<p><code>git reset --mixed HEAD</code> 会将本地暂存的修改从暂存区取出来，如果想彻底删除未提交的修改，可以使用<code>git reset --hard HEAD</code> （危险：本地修改将不会恢复了哦）<code>Reset</code>炫技完毕</p>

<p><code>Checkout</code>:应该非常熟悉了，首先就是切换分支：</p>

<p><code>git checkout develop</code> git 内部会将HEAD游标移动到master分支，并且更新工作区，因为它会重写本地修改，所以git强制我们在<code>Checkout</code>之前去提交或暂存工作区中的修改。</p>

<p><code>git checkout .</code> 注意该命令危险！它和 <code>git reset --hard HEAD</code> 类似，会彻底删除未提交的修改,不可恢复。可怕&hellip;</p>

<p><code>Revert</code>:命令是用一个新的提交来撤销某次历史提交，不会重写提交历史，是安全可恢复的。因此可用于公开提交的分支，这点与<code>Reset</code>不同，<code>Reset</code>仅用于私有特性分支。虽然我弱小，但是我很专一Y(^_^)Y</p>

<p>……这时 <code>git reset</code>胜出：无图无真相啊</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git8.png" width="553" height="206"/>
</div>


<p>修改完代码，<code>git diff</code>检察官道：看你那么慌，检查一下修改哇，好好好,就敲两个字母嘛
<code>gd</code>， <code>git diff</code>的别名</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git9.png" width="468" height="290"/>
</div>


<p>嚓，小手又抖了，赶紧改去……</p>

<p>特性功能终于码完了，必然和合并到主分之，<code>git merge</code> 和 ｀<code>git rebase</code>两位大将同时现身</p>

<h3>merge VS rebase</h3>

<p>假如现在分支情况如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/01.svg" width="468" height="290"/>
</div>


<p><strong>Merge 先来</strong></p>

<p>最简单的操作就是将branch1分支合并到develop，如下：</p>

<pre><code>git checkout feature_branch
git merge master
</code></pre>

<p>或者</p>

<pre><code>git merge master feature_branch
</code></pre>

<p>最终会在develop上创建一个新的合并提交记录。</p>

<p><code>merging</code> 是一个友好的命令，因为它是一个没有破坏性的操作，现有的分支不会有任何形式的改变，因此也就避免了<code>rebasing</code> 一些潜在的缺陷, 相反，这就意味着每一次<code>merging</code>都会在develop会遗留一次额外的提交，当develop开的分支非常活跃时，这将导致branch1&hellip;.N分支的历史记录初步变大，这时查看工程历史记录，就会发现各种分叉，很难理解。</p>

<p>merge后的效果如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/02.svg" width="468" height="290"/>
</div>


<p><strong>Rebasing</strong></p>

<p>作为<code>merging</code>的替代方法，我们也可以将branch1分支rebase到develop分支，命令如下：</p>

<pre><code>git checkout feature_branch
git rebase master
</code></pre>

<p>结果将branch1上所有提交移动到了develop分支的最前面，很高效，但与 merge 不同的是 rebase会重写工程提交历史，就像是在develop上重新提交了一遍一样,而不是想merge那样创建一个新的合并提交记录。</p>

<p><code>rebasing</code>最大的优点便是它可以得到一个很清晰的历史记录，首先，它避免了<code>merging</code>产生的那个不必要的提交记录，其次，<code>rebasing</code>的结果是一个完美的线型提交历史，可以很清楚的看到工程的变化。当然：<code>rebasing</code>也存在潜在的问题：1、安全性（在下面的rebase黄金法则中介绍） 2、可追溯性，即：<code>rebasing</code>或失去 <code>merging</code>创建的合并记录，从而无法查看合并记录点。</p>

<p>merge后的效果如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/03.svg" width="468" height="290"/>
</div>


<p><strong>Rebasing黄金法则</strong></p>

<p>理解了<code>rebasing</code>的使用，下来就是何时使用:<code>The golden rule is to never use it on public branches.</code></p>

<p>Example：
假设你讲master 分支rebase 到 feature_brauch分支,结果将master上所有提交移动到feature_brauch的最前面，问题是：这次合并操作只影响feature_brauch分支，所有其他开发这依然在original master分支上工作，由于<code>rebasing</code>是重写提交历史，git 会认为所有历史提交已经与其他开发者提交的不同，同步这两个分支唯一的办法是将feature_brauch分支又<code>merging</code>到master分支，结果是两次提交集合中大部分包含了相同的修改，不用说,这是一个非常混乱的局面。因此，当执行<code>rebasing</code>操作时，时常问下自己：<code>是不是有其他人在关注改分支？</code>如果是，则考虑其它方式，否则则可以安全使用<code>rebasing</code>。</p>

<h3>多人多分开发push之三步曲</h3>

<p>当多人在同一个分支开发，每次push前都会经历三部：
＋ <code>git fetch</code> 从远端将队友提交的代码拉下来 （此时在暂存区）
＋ <code>git rebase</code> 和本地代码合并（实际上是将自己的修改重新提交了一遍，至最新提交）， 如果遇到冲突，解决后， git rebase &ndash;continue即可
＋ <code>git push</code> 推送本地提交到远端</p>

<p>三步是不是有点繁琐？答案是：YES， <code>git pull</code>悍将还没出来呢？</p>

<p>git 默认的 <code>git pull</code> 命令相当于 <code>git fetch</code> + <code>git merge</code> (PS：这也是我们的体检记录无法直视的罪魁祸首) ,怎样将 <code>git pull</code> 改为 <code>git fetch</code> + <code>git rebase</code>呢？ Linus Torvalds 大神当然也会考虑到，使用配置: <code>git config</code></p>

<p><code>git config --global branch.autosetuprebase always</code> 加了 &ndash;global 将所有需要合并的操作改为 rebase 而不是 merge ,除非刻意使用 git merge</p>

<h3>更好的changelog</h3>

<p><code>git log</code>一定非常熟悉，如：</p>

<p> git log  命令是查看全部提交日志</p>

<p> git log -2  查看最近2次的提交日志</p>

<p> git log -p  查看历史纪录以来哪几行被修改</p>

<p> git log &ndash;oneline 查看历史提交日志，单行显示</p>

<p>如何更好的使用git log来解决使用过程中遇到的需求：（大家有木有遇到呢&hellip;）</p>

<p><strong>提交历史搜索</strong></p>

<p><code>git log --author="&lt;pattern&gt;"</code></p>

<p>根据提交作者，搜索提交历史 pattern 可以是字符串或这则表达式</p>

<p><code>git log --grep="&lt;pattern&gt;"</code></p>

<p>搜索提交历史 同上pattern 可以是字符串或这则表达式</p>

<p><strong>更清楚的显示单行提交历史</strong></p>

<p><code>git log --pretty=oneline</code> 显示如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git10.png" width="419" height="85"/>
</div>


<p>如何图形化显示更清晰的提交历史呢？</p>

<p><code>git log --graph --decorate --pretty=oneline --abbrev-commit --all</code></p>

<div align=center>
<img src="http://strivingboy.github.io/images/git11.png" width="392" height="90"/>
</div>


<p>能不能再漂亮一点呢？比如：显示提交时间、作者&hellip;..当然可以啦</p>

<p><code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</code></p>

<div align=center>
<img src="http://strivingboy.github.io/images/git12.png" width="491" height="90"/>
</div>


<p>漂亮了有木有^_^，每次打完包测试我们都回写下change log以便测试重点去测,格式随意改……</p>

<p>上面的命令这么长，每次敲岂不累死（前提是要记得住，哈哈), git alias轻松搞定
如：</p>

<p><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</code></p>

<p><strong><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></strong>中git 插件中提供了很多基础git别名, 个人上面使用的配置 (~/.gitconfig)如下：</p>

<div align=center>
<img src="http://strivingboy.github.io/images/git13.png" width="607" height="340"/>
</div>


<h3>常用点补充</h3>

<ul>
<li><code>git stash</code>
开发中我们经常也会遇到，代码写了一半，要切到另一个分支修复一个bug,或者需要拉取其他小伙伴的代码合并做测试，这时便可以使用 <code>git stash</code>经未完成的放在stash 栈中，相关命令有 :</li>
</ul>


<p><code>stash list</code>:列出stash 所有记录</p>

<p><code>stash apply</code>:将某个纪录取出</p>

<p><code>stash clear</code>:清空stash 栈</p>

<p>……</p>

<ul>
<li><code>git cherry-pick</code></li>
</ul>


<p>当多人在不同分支开发一个版本时，经常也会遇到 A分之上的小伙伴A debug需要B分之上小伙伴B的某次或多次提交， 这时 <code>git cherry-pick</code>朋友值得拥有</p>

<h3>More</h3>

<p><code>git hooks</code> 顾名思义 hook, 比如：在push一条commit之后自动给相关伙伴发邮件等,没有实际应用过……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更好的git log]]></title>
    <link href="http://strivingboy.github.io/blog/2014/09/29/better-git-log/"/>
    <updated>2014-09-29T11:05:41+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/09/29/better-git-log</id>
    <content type="html"><![CDATA[<p><code>git log</code>对于使用git的&#8221;码农们&#8221;一定非常熟悉，如：</p>

<p> git log  命令是查看全部提交日志</p>

<p> git log -2  查看最近2次的提交日志</p>

<p> git log -p  查看历史纪录以来哪几行被修改</p>

<p> git log &ndash;oneline 查看历史提交日志，单行显示</p>

<!--more-->


<p>以上是我们经常使用过的命令，接下来将谈谈如何更好的使用git log来解决使用过程中遇到的需求：（大家有木有遇到呢&hellip;）</p>

<p><strong>提交历史搜索</strong></p>

<p><code>git log --author="&lt;pattern&gt;"</code></p>

<p>根据提交作者，搜索提交历史 pattern 可以是字符串或这则表达式</p>

<p><code>git log --grep="&lt;pattern&gt;"</code></p>

<p>搜索提交历史 同上pattern 可以是字符串或这则表达式</p>

<p><strong>更清楚的显示单行提交历史</strong></p>

<p><code>git log --pretty=online</code> 显示如下：</p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-oneline.png" alt="git log --pretty=online" /></p>

<p>如何图形化显示更清晰的提交历史呢？</p>

<p><code>git log --graph --decorate --pretty=oneline --abbrev-commit --all</code></p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-lola.png" alt="git log lola" /></p>

<p>能不能再清楚点呢？比如：显示提交时间、作者&hellip;..当然可以啦</p>

<p><code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</code></p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-lg.png" alt="git log lola" /></p>

<p>是不是漂亮了很多，每次打完包我们都回写下change log, 之前每次都是根据git log 复制后编辑，汗&hellip;这体力活，有了上面的命令轻松修改下：</p>

<p><code>git log --pretty=format:'%s  %C(bold blue)(%an)%Creset' --abbrev-commit</code></p>

<p><img src="http://strivingboy.github.com/images/2014-09-29-changelog.png" alt="git log lola" /></p>

<p>上面的命令这么长，每次敲岂不累死（前提是要记得住，哈哈）我们可以使用linux 下的 alias,详见：<u><a href="http://en.wikipedia.org/wiki/Alias_">http://en.wikipedia.org/wiki/Alias_</a>(command) </u></p>

<p><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</code></p>

<p>现在你每次在终端输入git lg 就可以啦. 关于git 别名，可以参见：</p>

<p><strong><a href="http://strivingboy.github.com/blog/2014/09/03/git-aliase/">让Git命令更简单（Git alias)</a></strong></p>

<p><strong> 参考链接 </strong></p>

<ul>
<li><p><u><a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">https://www.kernel.org/pub/software/scm/git/docs/git-log.html</a> </u></p></li>
<li><p><u><a href="https://coderwall.com/p/euwpig">https://coderwall.com/p/euwpig</a> </u></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Git命令更简单（Git alias）]]></title>
    <link href="http://strivingboy.github.io/blog/2014/09/07/git-aliase/"/>
    <updated>2014-09-07T11:10:44+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/09/07/git-aliase</id>
    <content type="html"><![CDATA[<p>简单使用 git 命令的方式莫过于添加别名了，alias时linux下一个常用命令详见：<u><a href="http://en.wikipedia.org/wiki/Alias_">http://en.wikipedia.org/wiki/Alias_</a>(command) </u></p>

<p><strong>如何添加别名</strong></p>

<p>假设我们想用 <code>git ci</code>代替<code>git commit</code>, 我们可以添加如下命令到 <code>~/.gitconfig</code> 文件中</p>

<pre><code>［alias］
    ci = commit
</code></pre>

<p>如果不习惯手动编辑 config 文件，也可以使用命令 <code>git config alias.ci commit</code>来代替，如果想在自己机器的任何地方都使用改别名，则可添加 <code>--global</code> 标记</p>

<pre><code>git config --global alias.ci commit
</code></pre>

<!--more-->


<p><strong>常用别名</strong></p>

<pre><code>[alias]
  st = status
  ci = commit
  br = branch
  co = checkout
  df = diff
  ad=add
  cp = cherry-pick
  lg = log -p
</code></pre>

<p><strong>其他别名</strong></p>

<p>1.初始化git仓库</p>

<p><code>this = !git init &amp;&amp; git add . &amp;&amp; git commit -m \"initial commit\"</code></p>

<p>2.暂存</p>

<p><code>sl = stash list</code></p>

<p><code>sa = stash apply</code></p>

<p><code>ss = stash save</code></p>

<p>2.删除已经删除的文件</p>

<p><code>rd = git rm $(git ls-files --deleted) </code></p>

<p>3.清空未暂存的文件</p>

<p><code>cd = git clean -df</code></p>

<p>4.撤销本地所有修改</p>

<p><code>cl = git checkout .</code></p>

<p>5.列出所有别名</p>

<p><code>alias = config --get-regexp 'alias.*'</code></p>

<p>以上是我的常用git 别名，其他有意思的请在下面评论哈&hellip;..</p>

<p><strong> 参考链接 </strong></p>

<ul>
<li><u><a href="http://en.wikipedia.org/wiki/Alias_">http://en.wikipedia.org/wiki/Alias_</a>(command) </u></li>
<li><u><a href="http://git-scm.com/docs/">http://git-scm.com/docs/</a> </u></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 基础(三)]]></title>
    <link href="http://strivingboy.github.io/blog/2014/08/17/git-ji-chu-san/"/>
    <updated>2014-08-17T19:34:55+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/08/17/git-ji-chu-san</id>
    <content type="html"><![CDATA[<p>前两篇文章介绍了git的常用命令，基本已经能够满足我们的日常使用，这篇将谈谈使用过程中疑惑的地方，比如：何时使用<code>git rebase</code>何时使用<code>git merge</code>等</p>

<p><strong>1、Merging VS Rebasing</strong></p>

<p><code>git merge</code> 和 <code>git rebase</code> 命令都是用来将一个分支合并到另一个分支，只是用不同的方式罢了。下面看下它们的不同：</p>

<!--more-->


<p><strong>Case:</strong></p>

<p>当你开发一个独立的功能，为此建立了一个特性分支（假设是feature_branch）提交代码，其他团队成员在master分支上提交，结果必然有一个分叉的提交历史,现在假设你发现master分支上新的提交和你开发的功能有关系，为了将这些新的提交合并到feature_branch,于是就有两种选择：merging 或 rebasing</p>

<p><strong>Merging</strong></p>

<p>最简单的操作就是将master分支合并到feature_branch，如下：</p>

<pre><code>git checkout feature_branch
git merge master
</code></pre>

<p>或者</p>

<pre><code>git merge master feature_branch
</code></pre>

<p>最终会在feature_branch上创建一个新的合并提交记录。</p>

<p><code>merging</code> 是一个友好的命令，因为它是一个没有破坏性的操作，现有的分支不会有任何形式的改变，因此也就避免了<code>rebasing</code> 一些潜在的缺陷, 相反，这就意味着每一次<code>merging</code>都会在feature_branch会遗留一次额外的提交，当master分支非常活跃时，这将导致feature_branch分支的历史记录初步变大，这时查看工程历史记录，就会发现各种分叉，很难理解。</p>

<p><strong>Rebasing</strong></p>

<p>作为<code>merging</code>的替代方法，我们也可以将feature_branch分支 rebase到master分支，命令如下：</p>

<pre><code>git checkout feature_branch
git rebase master
</code></pre>

<p>结果将feature_branch上所有提交移动到了master分支的最前面，很高效，但与 merge 不同的是 rebase会重写工程提交历史，就像是在master上重新提交了一遍一样,而不是想mege那样创建一个新的合并提交记录。</p>

<p><code>rebasing</code>最大的优点便是它可以得到一个很清晰的历史记录，首先，它避免了<code>merging</code>产生的那个不必要的提交记录，其次，<code>rebasing</code>的结果是一个完美的线型提交历史，可以很清楚的看到工程的变化。当然：<code>rebasing</code>也存在潜在的问题：1、安全性（在下面的rebase黄金法则中介绍） 2、可追溯性，即：<code>rebasing</code>或失去 <code>merging</code>创建的合并记录，从而无法查看合并记录点。</p>

<p><strong>Rebasing黄金法则</strong></p>

<p>理解了<code>rebasing</code>的使用，下来就是何时使用:<code>The golden rule is to never use it on public branches.</code></p>

<p>举个例子：
假设你讲 master 分支rebase 到 feature_brauch分支,结果将master上所有提交移动到feature_brauch的最前面，问题是：这次合并操作只影响feature_brauch分支，所有其他开发这依然在original master分支上工作，由于<code>rebasing</code>是重写提交历史，git 会认为所有历史提交已经与其他开发者提交的不同，同步这两个分支唯一的办法是将feature_brauch分支又<code>merging</code>到master分支，结果是两次提交集合中大部分包含了相同的修改，不用说,这是一个非常混乱的局面。因此，当执行<code>rebasing</code>操作时，时常问下自己：<code>是不是有其他人在关注改分支？</code>如果是，则考虑其它方式，否则则可以安全使用<code>rebasing</code>。</p>

<p><strong>2、Reset, Checkout, and Revert</strong></p>

<p><code>git reset</code>、<code>git checkout</code>和<code>git revert</code>都是用来撤销对代码仓库的各种修改，前两个命令可以操作提交或单个文件，他们如此相似，在某种场合下容易混谣，下面我们将谈谈它们的区别。</p>

<p>我们都知道git 有三个主要的组件：1、工作区（Working Directory）2、暂存区（Staged Snapshot）3、提交历史(Commit History),理解这三个组件就不难掌握<code>git reset</code>、<code>git checkout</code>和<code>git revert</code>的区别，</p>

<p><code>Reset</code>:命令可以撤销当前分支的某些提交，如：</p>

<pre><code>git checkout feature_branch
git reset HEAD^2
</code></pre>

<p>上面的命令将当前分支回退了两次提交，<code>Reset</code>命令对于想撤销某些提交（前提是当前分支只有自己提交）时非常方便，<code>Reset</code>命令有一下标记：</p>

<ul>
<li>&ndash;soft:使用该标记不会影响暂存区和工作区</li>
<li>&ndash;mixed:使用该标记后，暂存区会更新到了指定的提交，工作区不影响，该标记是默认的</li>
<li>&ndash;hard:暂存区和工作区均更新到指定提交</li>
</ul>


<p><em>git reset &ndash;mixed HEAD</em> 会将本地暂存的修改从暂存区取出来，如果想彻底删除未提交的修改，可以使用<em>git reset &ndash;hard HEAD</em> （危险：本地修改将不会恢复了哦）这是<code>Reset</code>常用的两种方式。</p>

<p><code>Checkout</code>:应该非常熟悉了，首先就是切换分支：</p>

<pre><code>git checkout master
</code></pre>

<p>git 内部会将HEAD游标移动到master分支，并且更新工作区，因为它会重写本地修改，所以git强制我们在<code>Checkout</code>之前去提交或暂存工作区中的修改。</p>

<pre><code>git checkout .
</code></pre>

<p>注意该命令危险！它和 <em>git reset &ndash;hard HEAD</em> 类似，会彻底删除未提交的修改,不可恢复。</p>

<p><code>Revert</code>:命令是用一个新的提交来撤销某次历史提交，不会重写提交历史，是安全可恢复的。因此可用于公开提交的分支，这点与<code>Reset</code>不同，<code>Reset</code>仅用于私有特性分支。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 使用基础(二)]]></title>
    <link href="http://strivingboy.github.io/blog/2014/08/09/git-ji-chu-er/"/>
    <updated>2014-08-09T23:09:56+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/08/09/git-ji-chu-er</id>
    <content type="html"><![CDATA[<p><strong>git checkout</strong></p>

<p><code>git checkout</code> 命令提供三种功能：1、查看文件历史修改 2、切换到某次提交（或某次提交的特定文件） 3、切换分支</p>

<p>用法：</p>

<pre><code>git checkout master
</code></pre>

<p>从当前分支切换到master分支</p>

<pre><code>git checkout &lt;commit&gt; &lt;file&gt;
</code></pre>

<p>将本地文件file 更新到 commit 次提交</p>

<!--more-->


<p>例子：</p>

<pre><code>git log --oneline 查看下历史提交如下：

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ad90c97 modify link
</span><span class='line'>9de0669 add oneline.png
</span><span class='line'>b83c889 modify test.txt</span></code></pre></td></tr></table></div></figure>

git checkout ad90c97 查看修改内容

git checkout b83c889 test.txt 查看对test.txt 文件的修改
</code></pre>

<p><strong>git revert</strong></p>

<p><code>git revert</code> 命令用来撤销历史中的某次提交，并且不会撤销其后面的提交历史</p>

<p>用法：</p>

<pre><code>git revert &lt;commit&gt;
</code></pre>

<p>撤销 commit 次提交</p>

<p><strong>git reset</strong></p>

<p><code>git reset</code> 命令用来撤销历史中的某次提交，也会撤销其后面的提交历史以</p>

<p>用法：</p>

<pre><code>git revert &lt;commit&gt;
</code></pre>

<p>撤销 commit 次提交</p>

<pre><code>git revert --hard &lt;commit&gt;
</code></pre>

<p>将当前分之会退到 commit 提交，并且会撤销本地未提交的修改（不安全）</p>

<p><strong>git clean</strong></p>

<p><code>git clean</code> 命令用来移除本地未暂存的文件，相当于<code>git reset --hard</code></p>

<p>用法：</p>

<pre><code>git clean -df
</code></pre>

<p>移除本地未暂存的修改以及文件</p>

<p><strong>git rebase</strong></p>

<p><code>git rebase</code> 命令用来将一个分支移动到某个分支（如B分支），在B分支上作为最新的提交（结果相当于 git merge）</p>

<p>用法：</p>

<pre><code>git rebase &lt;base&gt;
</code></pre>

<p>将当前分支移动到base分支</p>

<p><strong>git merge</strong></p>

<p><code>git merge</code> 命令用来将一个分支合并到某个分支,合并的结果作为一次新的提交</p>

<p>用法：</p>

<pre><code>git merge &lt;branch&gt;
</code></pre>

<p>合并branch分支合并到当前分支，和<code>git rebase</code>的区别以及各自优缺点见这里: <strong><a href="http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88">git rebase vs git merge</a></strong></p>

<p><strong>git fetch</strong></p>

<p><code>git fetch</code> 命令用来获取远端仓库最新代码到本地,不会自动合并（相当于开了一个tmp分支）</p>

<p>用法：</p>

<pre><code>git fetch &lt;remote&gt; 或 git fetch &lt;remote&gt; &lt;branch&gt;
</code></pre>

<p><strong>git pull</strong></p>

<p><code>git pull</code> 命令用来获取远端仓库最新代码并且和本地代码自动合并</p>

<p>用法：</p>

<pre><code>git pull &lt;remote&gt; 
</code></pre>

<p>相当于：git fetch <remote> ＋ git merge origin/<current-branch>.</p>

<pre><code>git pull --rebase &lt;remote&gt;
</code></pre>

<p>相当于：git fetch <remote> + git rebase origin/<current-branch>.</p>

<p>实际上，很多开发者都使用 <code>git pull --rebase</code> git 也提供了对应的配置如下：</p>

<pre><code>git config --global branch.autosetuprebase always
</code></pre>

<p>详细理由见这里： <strong><a href="http://stackoverflow.com/questions/18930527/difference-between-git-pull-and-git-pull-rebase">git pull 和 git pull &ndash;rebase的不同</a></strong></p>

<p><strong>git push</strong></p>

<p><code>git push</code> 命令用来将本地提交推送到远程仓库</p>

<p>用法：</p>

<pre><code>git push &lt;remote&gt; &lt;branch&gt;
</code></pre>

<p><code>git push &lt;remote&gt; --tags</code> 将本地标签推送到远端，默认标签不会自动推送</p>

<p><strong>git remote</strong></p>

<p><code>git remote</code> 命令用来列出每个远程库的简短名字</p>

<p>用法：</p>

<pre><code>git remote
</code></pre>

<p>要查看当前配置有哪些远程仓库，可以用<code>git remote</code>命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库</p>

<pre><code>git remote -v 
</code></pre>

<p>结果如下：</p>

<pre><code>origin  https://github.com/strivingboy/strivingboy.github.com.git (fetch)
origin  https://github.com/strivingboy/strivingboy.github.com.git (push)
</code></pre>

<p>显示对应的克隆地址</p>

<pre><code>git remote add &lt;shortname&gt; &lt;url&gt;
</code></pre>

<p>添加一个新的远程仓库，可以指定一个简单的名字 shortname，以便将来引用</p>

<pre><code>git remote rm &lt;shortname&gt;
</code></pre>

<p>删除远端名为shortname的仓库</p>

<pre><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;
</code></pre>

<p>将远程仓库 old-name 重命名为 new-name</p>

<p>下一篇：<a href="http://strivingboy.github.com/blog/2014/08/17/git-ji-chu-san/">Git 使用基础(三)</a></p>
]]></content>
  </entry>
  
</feed>
