<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios8,day-by-day,翻译 | 小孩的技术博客]]></title>
  <link href="http://strivingboy.github.io/blog/categories/ios8-day-by-day-fan-yi/atom.xml" rel="self"/>
  <link href="http://strivingboy.github.io/"/>
  <updated>2015-10-23T00:11:06+08:00</updated>
  <id>http://strivingboy.github.io/</id>
  <author>
    <name><![CDATA[strivingboy]]></name>
    <email><![CDATA[striving_boy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS8 Day-by-Day :: Day 1 :: swift学习指南]]></title>
    <link href="http://strivingboy.github.io/blog/2014/11/27/ios8daybyday-swfit/"/>
    <updated>2014-11-27T16:21:13+08:00</updated>
    <id>http://strivingboy.github.io/blog/2014/11/27/ios8daybyday-swfit</id>
    <content type="html"><![CDATA[<p>这篇文章是iOS8 Day-by-Day系列的一部分，你可以查看完整的系列目录：<a href="/blog/2014/11/27/ios8daybyday/">iOS8 Day-by-Day 系列文章</a></p>

<p><strong>介绍</strong></p>

<p>今年的WWDC大会真让人难以置信,除了宣布iOS8之外,他们还引入了一个新的编程语言Swfit。这跟objective-c这种强类型的语言有很大的不同,它包括了现代语言一些常见特性。</p>

<p>怀着拥抱一切新东西的心情,这系列的博客将使用swfit。有大量的信息关于如何学习swfit语言,以及如何与cocoa交互——事实上下面这两本官方的书籍不能错过:</p>

<ul>
<li><a href="https://itunes.apple.com/cn/book/swift-programming-language/id881256329?mt=11">The Swift Programming Language</a></li>
<li><a href="https://itunes.apple.com/us/book/using-swift-cocoa-objective/id888894773?mt=11&amp;ls=1">Using Swift with Cocoa and Objective-C</a></li>
</ul>


<p>这两本书的中文版见 github: <a href="https://github.com/CocoaChina-editors/Welcome-to-Swift">Welcome-to-Swift</a></p>

<!--more-->


<p>同时可以参考苹果的<a href="https://developer.apple.com/swift/blog/">Swfit官方博客</a> 以及其它<a href="https://developer.apple.com/swift/resources/">swfit 资源</a></p>

<p>正因为有如此多关于Swfit的资源，本篇文章不会去介绍所有swfit的知识，而是介绍首次使用Swfit容易遇到的一些重要的陷阱以及潜在的问题，特别是和系统框架相关部分。</p>

<p>本章的实例程序github访问地址:<a href="https://github.com/ShinobiControls/iOS8-day-by-day/">github.com/ShinobiControls/iOS8-day-by-day/</a></p>

<p><strong>初始化</strong></p>

<p>关于初始化，swfit 和 objective-c 有很大的不同如下：</p>

<p>objective-c代码:</p>

<pre><code class="objective-c">- (instancetype)init {
  self = [super init];
  if (self) {
    // Do some stuff
  }
  return self;
}
</code></pre>

<p>对应的swfit代码如下：</p>

<pre><code class="objective-c">init {
  variableA = 10
  ...
  super.init()
}
</code></pre>

<p>objective-c 的初始化方法负责 创建和返回<em>self</em> 而swfit没有<em>return</em> 语句，这就意味着swfit没有任何方式去返回<em>nil</em>对象。
<em>nil</em> 对象在objective-c中通常表示一个失败的初始化，这显然在接下来发布的swfit更新中有可能改掉。</p>

<p><strong>可变对象与不可变对象</strong></p>

<p>可变或不可变对象的概念对Cocoa开发者已经非常熟悉如：<em>NSArray</em> 和 <em>NSMutableArray</em> 在swfit中，<em>let</em>关键字来定义不可变对象，如：</p>

<pre><code class="objective-c">let a = MyClass()
a = MySecondClass() // Not allowed
</code></pre>

<p>这就意味这不能重新赋值给<em>let</em>关键字指定的实例。实例的引用能不能重新赋值取决于对象的类型，如果一个实例是<strong>value type</strong>（如结构体）引用了<em>let</em>关键字指定的实例，改实例依然是不可变的，如果引用是一个<strong>class</strong>实例, 则改引用是可变的，具体看下面的例子：</p>

<pre><code class="objective-c">struct MyStruct {
  let t = 12
  var u: String
}
</code></pre>

<p>如果使用<em>var</em>关键字定义一个变量<em>struct1</em> ,你将得到如下行为：</p>

<pre><code class="objective-c">var struct1 = MyStruct(t: 15, u: "Hello")
struct1.t = 13 // Error: t is an immutable property
struct1.u = "GoodBye"
struct1 = MyStruct(t: 10, u: "You")
</code></pre>

<p>你可以改变属性<em>u</em>，因为它是通过<em>var</em>关键字定义的，同时也可以变量<em>struct1</em>本身，同样是因为通过<em>var</em>关键字定义的，而不能改变属性<em>t</em>,因为它是通过<em>let</em>关键字定义的，让我们看下使用<em>let</em>关键字定义的一个<em>struct</em>：</p>

<pre><code class="objective-c">let struct2 = MyStruct(t: 12, u: "World")
struct2.u = "Planet" // Error: struct2 is immutable
struct2 = MyStruct(t: 10, u: "Defeat") // Error: struct2 is an immutable ref
</code></pre>

<p>现在，不仅是<em>struct2</em>不可变，而去属性<em>u</em>也是不可变的，这是因为结构体是一个 <strong>value type</strong></p>

<p>对于一个<strong>class</strong>上述行为则有点不同，如下：</p>

<pre><code class="objective-c">class MyClass {
  let t = 12
  var u: String

  init(t: Int, u: String) {
    self.t = t
    self.u = u
  }
}
</code></pre>

<p>通过<em>var</em>关键字定义一个<em>class</em>实例，行为和使用objective-c类似：</p>

<pre><code class="objective-c">var class1 = MyClass(t: 15, u: "Hello")
class1.t = 13 // Error: t is an immutable property
class1.u = "GoodBye"
class1 = MyClass(t: 10, u: "You")
</code></pre>

<p>现在不仅引用自己是可变的，而且所有通过<em>var</em>关键字定义的属性也是可变的，只是通过<em>let</em>关键字定义的属性是不可变的。作为比较我们来看下使用<em>let</em>关键字定义的实例：</p>

<pre><code class="objective-c">let class2 = MyClass(t: 12, u: "World")
class2.u = "Planet" // No error
class2 = MyClass(t: 11, u: "Geoid") Error: class2 is an immutable reference
</code></pre>

<p>现在自己的引用就是不可变的了，但是<em>var</em>关键字定义的属性是可变的，这是因为一个<em>class</em>是 <strong>reference type</strong></p>

<p>上述行为时比较容易理解的，因为大部分有引用类型的语言书籍都有详细的解释，当使用swfit 集合类型是上述行为就有点困惑，一个 <em>NSArray</em> 是一个<strong>reference type</strong>,也就是说当你创建一个<em>NSArray</em>实例时，就是创建了一指针指向数组所在的一块内存区域（根据objective-c 的定义），如果你根据上面介绍的&#8221;reference type&#8221;不难推理出<em>NSArray</em>的实例也是可变的，实际上，如果要创建一个可变数组，再objective-c中完我们要使用<em>NSMutableArray</em>
Swfit 数组与此不同，它使用<strong>value types</strong> 来代替 <strong>reference types</strong>, 也就意味着在swfit中的行为类似一<em>struct</em>而不是一个<em>class</em>,因此关键字 <em>let</em> 或者<em>var</em> 不仅可以指定变量是否可以重定义，而且还可以指定一个数组实例是否可变。
通过 <em>var</em>定义的数组既可以重新赋值也是可变的：</p>

<pre><code class="objective-c">var array1 = [1,2,3,4]
array1.append(5)  // [1,2,3,4,5]array1[0] = 27    // [27,2,3,4,5]
array1 = [3,2]    // [3,2]
</code></pre>

<p>通过 <em>var</em>定义的数组两者都不可以：</p>

<pre><code class="objective-c">let array2 = [4,3,2,1]
array2.append(0) // Error: array2 is immutablearray2[2] = 36   // Error: array2 is immutable
array2 = [5,6]   // Error: cannot reassign an immutable reference
</code></pre>

<p>哦，my god,都晕了，这不仅完全改变了我们对集合可变的认识，而且混谣了上面说的两个概念的区别，这个有个可能在后面swfit语言的发展中会修改，因此保持关注swfit语言的定义。</p>

<p>结论：由于arrays 是 值类型，所以它们通过拷贝来传递，<em>NSArray</em>实例是通过引用来传递，如果在一个方法中传递一个swfit array ，它将对这个数组进行拷贝，至于是深拷贝还是潜拷贝取决于数组中存储的对象。</p>

<p><strong>强类型和任意对象(AnyObject)</strong></p>

<p>强类型是swfit一个很大的特性，使用它可以写出更安全的代码，这使得objective-c在运行时的异常可以在编译时捕获。</p>

<p>这是很强大，但是在objective-c 中我们经常用到 <em>id</em>类型，swfit中对应的就是<em>AnyObject</em>，<em>AnyObject</em> 感觉不像swfit的风格(un-swfit-like)，它允许你调用任何它能找到的方法，但是这将在运行时导致异常。实际上，它的行为和objective-c的<em>id</em>非常相似，区别在于，如果<em>AnyObject</em>对象上没有相应的属性或方法，它将返回<em>nil</em>:</p>

<pre><code class="objective-c">let myString: AnyObject = "hello"
myString.cornerRadius // Returns nil
</code></pre>

<p>为了更像Cocoa APIs中的 swfit 风格（swfit-like），下面是很常见的代码模式：</p>

<pre><code class="objective-c">func someFunc(parameter: AnyObject!) -&gt; AnyObject! {
  if let castedParameter = parameter as? NSString {
    // Now I know I have a string :)
    ...
  }
}
</code></pre>

<p>如果你完全确定传递一个字符串，你没有必要做如上的代码保护，可以直接这样写：</p>

<pre><code class="objective-c">let castedParameter = parameter as NSString
</code></pre>

<p><strong>Swift 协议（protocol）</strong></p>

<p>Protocol 在swift中很容易理解如下：</p>

<pre><code class="objective-c">protocol MyProtocol {
  func myProtocolMethod() -&gt; Bool
}
</code></pre>

<p>一个常见的情况就是检测一个对象是否符合指定的协议，你可能写下：</p>

<pre><code class="objective-c">if let class1AsMyProtocol = class1 as? MyProtocol {
    // We're in
}
</code></pre>

<p>然而它会导致错误，因为为了检查是否符合某个协议，改协议必须是objective-c 协议，即通过 <em>@objc</em>来指定的协议：</p>

<pre><code class="objective-c">@objc protocol MyNewProtocol {
  func myProtocolMethod() -&gt; Bool
}

if let class1AsMyNewProtocol = class1 as? MyNewProtocol {
  // We're in
}
</code></pre>

<p>如果Swift类继承自Objective-C的类，则它里面的方法和属性都能够作为Objective-C的选择器使用。而如果不是Objective-C的子类，需要使用@objc属性修饰。</p>

<p><strong>枚举</strong></p>

<p>枚举在swfit中变化很大，不仅可以枚举有关联的值（可以使不同类型），而且还方法也可以枚举。</p>

<pre><code class="objective-c">enum MyEnum {
  case FirstType
  case IntType (Int)
  case StringType (String)
  case TupleType (Int, String)

  func prettyFormat() -&gt; String {
    switch self {
    case .FirstType:
      return "No params"
    case .IntType(let value):      return "One param: \(value)"    case .StringType(let value):
      return "One param: \(value)"
    case .TupleType(let v1, let v2):
      return "Some params: \(v1), \(v2)"
    default:
      return "Nothing to see here"
    }
  }
}
</code></pre>

<p>真是强大，可以如下使用：</p>

<pre><code class="objective-c">
var enum1 = MyEnum.FirstType
enum1.prettyFormat() // "No params"
enum1 = .TupleType(12, "Hello")
enum1.prettyFormat() // "Some params: 12, Hello"
</code></pre>

<p><strong>总结</strong></p>

<p>Swfit 是一门功能强大的语言，掌握它的最佳实践、惯用方法以及模式需要一段时间，这篇文章列出了一些从objective-c到swfit常见的困惑.</p>

<p>本文翻译自：<a href="http://www.shinobicontrols.com/blog/posts/2014/07/17/ios8-day-by-day-day-1-blaggers-guide-to-swift">ios8-day-by-day-day-1-blaggers-guide-to-swift</a></p>
]]></content>
  </entry>
  
</feed>
